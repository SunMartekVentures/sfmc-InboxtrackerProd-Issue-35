<html>

<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
	<!-- Bootstrap -->
	<!--<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>-->
	<link id="btsplinkMain" rel="stylesheet" href="/css/sparkpostdashboard.css">
</head>
<link id="btsplink5" rel="stylesheet" href="">
<link id="btsplink1" rel="stylesheet" href="">
<link id="newboostrap" rel="stylesheet" href="" />
<link rel="stylesheet" href="css/font-awesome.min.css" />
<link rel="stylesheet" href="css/jQuery-plugin-progressbar.css">
<link rel="stylesheet" href="css/style.css" />

<script id="btsplink2" src=""></script>
<script id="btsplink3" src=""></script>
<script id="btsplink4" src=""></script>

<!-- jquery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

</head>

<body class="bodyposition">
	<input type="hidden" id="tssd" />
	<input type="hidden" id="code" />
	<input type="hidden" id="rt" />
	<input type="hidden" id="memberid" />
	<input type="hidden" id="restInstance" />
	<input type="hidden" id="soapInstance" />
	<input type="hidden" id="FolderID" />
	<input type="hidden" id="accountId" />
	<input type="hidden" id="sparkpostUserId" />
	<input type="hidden" id="rowCount" />
	<input type="hidden" id="DEexternalKeyDomainConfiguration" />
	<input type="hidden" id="DEexternalKeyIntelliseedLists" />
	<div>
		<div class="tab" style="margin-left: -8px;margin-right: -10px;"> <span style="float:left; margin-left: 10px;">
				<img src="/images/sparkpost-logo.png" alt="logo" width="100" height="28"
					style="margin-top:5px;margin-left: 40%;" />
			</span>
			<div style="margin-right:69px;float:right">
				<button onclick="myFunction()" class="dropbtn" style="color: FA6223;">Settings</button>
				<div id="myDropdown" class="dropdown-content modalHeight"> <button class="track"
						onclick="openTab(event, 'Tracker Summary'); trackersummary();Showtracker(); hidecampaign();"
						style="font-size:15px;" id="TrackerSummary"> Tracker Summary</button>
					<button class="track setuptop" style="font-size:15px;" onclick="openTab(event, 'Setup')">
						Setup</button>
				</div>
			</div>
		</div>
		<div class="tab" style="
		margin-left: -8px;
		margin-right: -10px;
	">
			<button class="tablinks" style="margin-left: 10%;border-right: 2px solid;border-right-style: inset; "
				onclick="openTab(event, 'Dashboard');hidecampaign(); hidetracker()" id="defaultOpen"> <span
					id="DashboardSpan" style="color: FA6223;">Dashboard</span> </button>
			<button class="tablinks" style="border-right: 2px solid;border-right-style: inset; "
				onclick="openTab(event, 'Watched Campaigns');  watchedCampaigns();hidecampaign(); hidetracker()"> <span
					id="Watched CampaignsSpan" style="color: FA6223;">Impacted Campaigns</span></button>
			<button class="tablinks" style="border-right: 2px solid;border-right-style: inset; "
				onclick="openTab(event, 'Journey Performance'); journeyPerformance();hidecampaign(); hidetracker()">
				<span id="Journey PerformanceSpan" style="color: FA6223;"> Journey Performance</span></button>

			<button id="btncampaign" style="border-right: 2px solid;border-right-style: inset; " class="tablinks"
				style="display:none;" onclick="openTab(event, 'Campaign Performance');hidetracker()"> <span
					id="Campaign PerformanceSpan" style="color: FA6223;"> Campaign Performance </span></button>
			<button id="btntracker" style="border-right: 2px solid;border-right-style: inset; " class="tablinks"
				style="display:none" onclick="openTab(event, 'Tracker Summary'); trackersummary()"> <span
					id="Tracker SummarySpan" style="color: FA6223;"> Tracker Summary</span></button>

		</div>
		<div id="Dashboard" class="tabcontent">
			<div style="width: 960px;">
				<iframe src="https://sfmc.emailanalyst.com/bin/#/login" width="100%" height="78%" frameborder="0"
					style="border:0;position: fixed;width: 100%;left: 0;top: 16%;bottom: 100%;"
					title="Sparkpost"></iframe>
			</div>
		</div>
		<div id="Journey Performance" class="tabcontent alignLeft">
			<h3 class="topbox">
				<span class="spanTracker1"><img src="images/fire.png" height="30" width="30"></span> &nbsp;&nbsp;
				<span class="titleHeader">Active Journeys</span>
			</h3>
			<div id="spinner"></div>
			<div id="dvTable" style="margin-top: 10px;"></div>
			<div id="journeymsg" style="display: none;font-weight: 600;
			font-size: 25px;text-align:center;
			letter-spacing: 1px;">No Active Journeys, please activate journeys to begin using the Journey Performance Dashboard
			</div>
		</div>
	</div>

	<div id="Watched Campaigns" class="tabcontent alignLeftWc">
		<h3 class="topbox">
			<span class="spanTracker1"><img src="images/fire.png" height="30" width="30"></span> &nbsp;&nbsp;
			<span class="titleHeader">Impacted Campaigns</span>
		</h3>
		<div id="spinner"></div>

		<div class="outerbox">
			<div id="dv1Table" style="margin-top: 0px; margin-left:0px;"></div>
			<div id="impactedmsg" style="display: none;font-weight: 600;
			font-size: 25px;text-align:center;
			letter-spacing: 1px;">Great News! No Impacted Campaigns to review</div>
		</div>
	</div>

	<div id="Campaign Performance" class="tabcontent alignLeft" style="height:425px;">
		<section class="section sales">
			<div class="container-fluid">
				<div class="row section-one">
					<div class="row divPageHeadingStyle" id="divPageHeading" style="margin-right:0px;">
						<div class="col-sm-12">
							<span class="spanTracker2"><img src="images/fire.png" height="20" width="20"></span>

							<label class="pageHeadingFontStyle" id="campaignPerformanceSubject">Email Deliverability
								Performance - Dynamic Subject (514011827_69227) - Example: logo header, again</label>

						</div>
					</div>
				</div>
			</div>
		</section>
		<section class="section sales">
			<div class="container-fluid">
				<div class="row section-one">
					<div class="col-lg-4">
						<div class="campaign">
							<div class="campaign_heading d-flex">
								<div>
									<img src="img/emailIcon.png" alt="Message"
										style="background-color: #3D93D9;height: 24px;width: 24px;padding: 2px;border-radius: 5px;">
								</div>
								<div>
									<p class="ml-2 bold title">Campaign Delivery (Salesforce) - <small
											id="currentDate"></small></p>
								</div>
							</div>
							<div class="row border-right">
								<div class="col-lg-8">
									<div class="progressBar d-flex justify-content-between text-center">
										<div>
											<label>Deliveries</label>
											<div id="sendData" class="progress-bar position" data-label="inbox"
												data-percent="0" data-duration="500" data-color="#cfdde8,#66a3d5"></div>
										</div>
										<div>
											<label>Opens</label>
											<div id="openData" class="progress-bar position" data-percent="0"
												data-duration="500" data-color="#cfdde8,#9755f1"></div>
										</div>
										<!-- <div class="progress-bar position" data-percent="20" data-color="#a456b1,#12b321"></div> -->
									</div>
									<div class="progressBar d-flex justify-content-between text-center">
										<div>
											<label>Clicks</label>
											<div id="clickData" class="progress-bar position" data-percent="0"
												data-color="#cfdde8,#26a69f"></div>
										</div>
										<div>
											<label>Unsubscribes</label>
											<div id="unSubData" class="progress-bar position" data-percent="0"
												data-color="#cfdde8,#ffb75d"></div>
										</div>
									</div>
								</div>
								<div class="col-lg-4">
									<label>Bounce Performance</label>
									<div class="bounce_perf">
										<i class="fa fa-circle red" aria-hidden="true"></i> <small id="hardBounce">Hard
											(0)</small><br />
										<i class="fa fa-circle yellow" aria-hidden="true"></i> <small
											id="softBounce">Soft (0)</small><br />
										<i class="fa fa-circle grey" aria-hidden="true"></i> <small
											id="blockBounce">Block (0)</small><br />
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="col-lg-4 ">
						<div class="img-preview">
							<p class="small">Message Preview <i class="fa fa-info-circle" aria-hidden="true"></i></p>
							<div style="
								overflow-y: auto;
								height: 282px;
								width: 100%;
							">
								<img src="img/message_preview.png" class="img-fluid" alt="Preview" id="imageUrl" />
							</div>
						</div>
					</div>

					<div class="col-lg-4">
						<div class="email_delivery">
							<div class="email_heading d-flex">
								<span class="spanTracker1" style="margin-bottom: 9px;"><img src="images/fire.png"
										height="18" width="21"></span>
								<div>
									<p class="ml-2 bold title">Email Deliverability</p>
								</div>
								<div class="ml-auto">
									<a class="btn bold align-self-center" href="#" id="viewCampaignDetails">View
										Campaign Details</a>
								</div>
							</div>
							<div class="progressBar border-left">
								<div class="row">
									<div class="col-lg-4 col-7 sm-mb-50">
										<!-- <div class="d-sm-flex d-xs-block"> -->
										<div class="">
											<label>Campaign Rates <i class="fa fa-info-circle"
													aria-hidden="true"></i></label>
											<div id="campaignRateCircle" class="progress-bar position cr"
												data-label="inbox" data-value="inbox" data-duration="500"
												data-color="#cfdde8,#4BCA81"></div>

											<div class="col-lg-5 col-9 sm-mb-50">
												<ul class="list-unstyled text-left">
													<li>Spam Rate</li>
													<li class="bold" id="SpamRate"></li>
												</ul>
											</div>
										</div>
									</div>
									<div class="col-lg-4 col-5 sm-mb-50 text-center sm-text-left">
										<label>SPF <i class="fa fa-info-circle" aria-hidden="true"></i></label>
										<div id="SPFPercentage" class="progress-bar position spf" data-percent="50"
											data-duration="500" data-color="#cfdde8,#4BCA81"></div>
									</div>
									<div class="col-lg-4 col-7 sm-mb-50 text-center sm-text-left">
										<label>DKIM <i class="fa fa-info-circle" aria-hidden="true"></i></label>
										<div id="DKIMPercentage" class="progress-bar position dkim" data-percent="30"
											data-duration="500" data-color="#cfdde8,#4BCA81"></div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</section>

		<section class="section section-two">
			<div class="container-fluid">
				<div class="row d-sm-flex justify-content-between">
					<div class="section-one">
						<p class="ml-3 bold title">Engagement Detail - Seed + Panel</p>
						<div class="engagement_detail">
							<form>
								<div class="form-group row">
									<label class="col-lg-3 col-4 align-self-center" for="subject">Subject : </label>
									<input type="text" class="form-control col-lg-9en col-8"
										style="background-color:white" id="engagementDetailSubject" readonly>
								</div>
								<div class="form-group row">
									<p id="daysActive" class="col-lg-3"></p>
									<p class="col-lg-4" id="firstSeenCP"></p>
									<p class="col-lg-4" id="lastSeenCP"></p>
								</div>
							</form>
							<div class="progressDiv">
								<div class="d-flex justify-content-between">
									<p>Read</p>
									<p id="ReadRange"></p>
								</div>
								<div class="progress">
									<div id="ReadRangeBar" class="progress-bar dark-grey" role="progressbar"
										aria-valuenow="40" aria-valuemin="0" aria-valuemax="100"></div>
								</div>
							</div>
							<div class="progressDiv">
								<div class="d-flex justify-content-between">
									<p>Deleted</p>
									<p id="DeleteRange"></p>
								</div>
								<div class="progress ">
									<div id="deleteRangeBar" class="progress-bar red" role="progressbar"
										aria-valuenow="13.4" aria-valuemin="0" aria-valuemax="100"></div>
								</div>
							</div>
							<div class="progressDiv">
								<div class="d-flex justify-content-between">
									<p>Read & Deleted</p>
									<p id="ReadDeleteRange"></p>
								</div>
								<div class="progress">
									<div id="readDeleteRangeBar" class="progress-bar yellow" role="progressbar"
										aria-valuenow="26.1" aria-valuemin="0" aria-valuemax="100"></div>
								</div>
							</div>
						</div>
					</div>
					<div class="section-one">
						<p class="ml-3 bold title">Deliverability Detail - By ISP</p>
						<div class="delivery_detail">
							<p class="bold title" id="ISPdynamic">ISP</p>
							<div class="row" id="Campaignrow"></div>
						</div>
					</div>
				</div>
			</div>
			<section>

				<script src="js/jquery-2.1.4.min.js"></script>
				<script src="js/jquery-3.2.1.slim.min.js"></script>
				<script src="js/popper.min.js"></script>
				<script id="bootstrapScript" src=""></script>
				<script src="js/jQuery-plugin-progressbar.js"></script>
	</div>

	<div id="Tracker Summary" class="tabcontent">

		<h3 class="topbox">
			<span class="spanTracker1"><img src="images/fire.png" height="30" width="30"></span> &nbsp;&nbsp;
			<span class="titleHeader">Tracker Summary</span>
		</h3>
		<div class="outerbox ">



			<div id="dv3Table"></div>

		</div>
	</div>

	<div class="footer">
		<img src="/images/SparkPost_Logo_White_800x209.png" alt="logo" width="175" height="42" style="
			margin-right: 8%;
		">
	</div>
	<script type="text/javascript">

		function escapeQuotes(str) {
			if (typeof str === 'string') {
				var replaced = str.replace(/'/gum, '\\\'', str);
				console.log("original:" + str);
				console.log("replaced:" + replaced);
				return replaced;
			}
			return str;
		}

		function journeyPerformance() {

			document.getElementById("dvTable").style.display = "block";
			document.getElementById("journeymsg").style.display = "none";


			showSpinner();
			var Headers = new Array();
			var customers = new Array();
			var activejourney = new Array();
			var templatename = new Array();
			var campaign = new Array();
			var duplicateArray = [];
			var Customer = [];
			let journeyCount = 0;
			var journeySubject;
			var Customerlen = false;

			let campaigns = {};
			let Domains = {};
			var ActivityCount = 0;
			var CampaignCount = 0;
			var sparkSubjectCount = 0;

			var sparkSubject;
			var journeyname;
			var JourneyId;
			var JourneyVersion;
			//var UserId;
			var json;
			var readGreenimage;
			var InboxGreenimage;
			var dkimGreenimage;
			var spfGreenimage;
			Headers.push(["Inbox Tracker Campaigns", "Journey", "Status", "Campaign Health", " ", "", ""]);
			let sparkpostUserId = $('#sparkpostUserId').val();
			let refreshtoken = $('#rt').val();
			let tssd = $('#tssd').val();
			let memberid = $('#memberid').val();
			let restInstance = $('#restInstance').val();
			let soapInstance = $('#soapInstance').val();
			let UserId = $('#accountId').val();
			console.log("user Id " + UserId);
			axios({
				method: "POST",
				url: "/retrievingDataExtensionRows",
				data: {
					refreshToken: refreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance
				}
			})
				.then(function (result) {
					if (result.data) {
						$('#rt').val(result.data.refreshToken);
						Domains = result.data.rawData;
					}
				}).catch(function (error) {
				})

			let newrefreshtoken = $('#rt').val();
			const params = {
				refreshToken: newrefreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance
			};
			axios({
				method: "GET",
				url: "/getactivejourneys",
				params: params,
			})
				.then(function (response) {
					console.log("response data for get active journeys :: " + JSON.stringify(response.data));
					$('#rt').val(response.data.refreshToken);
					if (response.data.journeys.items.length > 0) {
						let journeyrefreshtoken = $('#rt').val();
						for (var i = 0; i < response.data.journeys.items.length; i++) {
							activejourney.push([response.data.journeys.items[i].name, response.data.journeys.items[i].status, '<img class = "textalignImg" src="/images/flame_green.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>', response.data.journeys.items[i].id]);
							axios({
								method: "POST",
								url: "/getJourneysById",
								data: {
									journeyId: response.data.journeys.items[i].id,
									name: response.data.journeys.items[i].name,
									status: response.data.journeys.items[i].status,
									version: response.data.journeys.items[i].version,
									refreshToken: journeyrefreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance
								},
							})
								.then(function (response) {
									console.log("response data for get active journeys by ID :: " + JSON.stringify(response.data))
									let activity = false;
									if (response.data) {
										$('#rt').val(response.data.refreshToken);
										if (response.data.activity.activities) {

											for (var i = 0; i < response.data.activity.activities.length; i++) {
							
												if (response.data.activity.activities[i].type == 'EMAILV2') {
													let emailId = response.data.activity.activities[i].configurationArguments.triggeredSend["emailId"];
													var senderProfileIdRefreshToken = $('#rt').val();
													activity = true;
													journeyCount++;
													var data = response.config.data;
													var json = JSON.parse(data);
													axios({
														method: "GET",
														url: "/getsenderdomain",
														params: {
															senderProfileID: response.data.activity.activities[i].configurationArguments.triggeredSend.senderProfileId,
															emailSubject: response.data.activity.activities[i].arguments["emailSubjectDataBound"],
															templateName: response.data.activity.activities[i]["name"],
															refreshToken: senderProfileIdRefreshToken, tssd: tssd, memberid: memberid, soapInstance: soapInstance,
														},
													}).then(function (response) {
														var activityArray = new Array();
														$('#rt').val(response.data.refreshToken);
														console.log("Response for the sender profile Domain Name ::: " + JSON.stringify(response.data))
														var sentParams = response.config.params;
														var senderProfileDomainName = response.data.domainName
														if (senderProfileDomainName.indexOf("@") >= 0) {
														    senderProfileDomainName = response.data.domainName.split("@")[1]
													  }
														console.log("sender Profile Domain Name ::: " + senderProfileDomainName);
														console.log("response for the senderProfileID " + JSON.stringify(response.data));
														activityArray.push([json["name"], json["status"], json["journeyId"], sentParams["emailSubject"], sentParams["templateName"], json["version"], senderProfileDomainName, emailId]);
														if (activityArray.length > 0) {
															for (var i = 0; i < activityArray.length; i++) {
																axios({
																	method: "POST",
																	url: "/getstatus",
																	data: { accountID: UserId, tssd: tssd, refreshToken: response.data.refreshToken, emailId: activityArray[i][7], subject: activityArray[i][3], journeyName: activityArray[i][0], journeyStatus: activityArray[i][1], journeyId: activityArray[i][2], journeyversion: activityArray[i][5], activityname: activityArray[i][4], senderProfileDomain: activityArray[i][6]},
																})
																	.then(function (response) {
																		sparkSubject = false;
																		CampaignCount++;
																		console.log("get status response data ::: " + JSON.stringify(response.data));
																		if (response) {
																			if(response.data.refreshToken) $('#rt').val(response.data.refreshToken);
																			Customerlen = false;
																			var data = response.config.data;
																			json = JSON.parse(data);
																			JourneyId = json["journeyId"];
																			JourneyVersion = json["journeyversion"];

																			if (response.data.subjectData) {
																				sparkSubjectCount = 0;

																				//for (ivar = 0; ivar < response.data.length; ivar++) {
																				sparkSubjectCount++;
																				//sometime we got multiple response with correct subject and incorrect subject.
																				//here we handle duplicate subject to add else statement. 
																				/*if(sparkSubjectCount == response.data.length && !sparkSubject
																		   ){
																			   sparkSubject=false;
																			 } */
																				//if (journeyname != undefined && journeyname != json["journeyName"]) {
																				//CampaignCount = 1;

																				//}

																				//if ((response.data.length == 1) ||(json["subject"] == response.data[ivar]["subject"])) {
																				//this true used for got subject from sparkpost
																				sparkSubject = true;
																				Customerlen = true;
																				journeyname = json["journeyName"];
																				journeySubject = json["subject"];
																				var fromaddress = response.data.subjectData["fromAddress"];
																				var domainName = fromaddress.split("@");
																				var spfvalue;
																				var spfimg;
																				var dkimvalue;
																				var dkimimg;
																				var validDomain = {};
																				var engagementimg;
																				var InboxImage;
																				var str;
																				var readRateValue;
																				if (response.data.subjectData["subject"].includes("'")) {
																					str = response.data.subjectData["subject"];
																					journeySubject = str;
																				} else {
																					str = response.data.subjectData["subject"];
																				}
																				if (str.includes(",")) {
																					str = str.replaceAll(",", "");
																					journeySubject = str;
																				}
																				//if (json["senderProfileDomain"] == domainName[1]) {
																				for (var i = 0; i < Domains.length; i++) {
																					if (domainName[1] == Domains[i]["Properties"][0]["Property"][1]["Value"]) {
																						validDomain = Domains[i];
																					}
																				}

																				if ((Object.keys(validDomain).length > 0)) {
																					// if(response.data[ivar]["reputation"]["spf"] && response.data[ivar]["reputation"]["dkim"]){
																					//if((Math.round(response.data[ivar]["reputation"]["dkim"]["passPercentageWeighted"]) || Math.round(response.data[ivar]["reputation"]["dkim"]["failPercentageWeighted"]) != 0 ) && (Math.round(response.data[ivar]["reputation"]["spf"]["passPercentageWeighted"]) || Math.round(response.data[ivar]["reputation"]["spf"]["failPercentageWeighted"]) != 0)){
																					if ((validDomain["Properties"][0]["Property"][2]["Value"] != '' && response.data.subjectData["overallInboxPercentWeighted"]) || (validDomain["Properties"][0]["Property"][2]["Value"] !== '' && response.data.subjectData["overallInboxPercentWeighted"] === 0)) {
																						InboxImage = (Math.round(response.data.subjectData["overallInboxPercentWeighted"] * 100) >= validDomain["Properties"][0]["Property"][2]["Value"]) ? '<img src="/images/inbox_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/inbox_red.png" alt="logo" heigth="12" width="15"></img>';
																					} else {
																						InboxImage = '<img src="/images/inbox_idle.png" alt="logo" heigth="12" width="15"></img>';
																					}
																					if ((response.data.subjectData["overallInboxPercentWeighted"] || response.data.subjectData["overallInboxPercentWeighted"] === 0) && (validDomain["Properties"][0]["Property"][2]["Value"] != '')) {
																						//these condition used for only issues only
																						InboxGreenimage = (Math.round(response.data.subjectData["overallInboxPercentWeighted"] * 100) >= validDomain["Properties"][0]["Property"][2]["Value"]) ? 'true' : 'false';
																					} else {
																						//InboxGreenimage = 'true';
																						InboxGreenimage = 'gray';
																					}
																					if (!response.data.subjectData["readRatePercent"] && response.data.subjectData["readRatePercent"] !== 0) {
																						readRateValue = '';
																					} else {
																						//these condtion used for checking null readRatePercent
																						readRateValue = Math.round(response.data.subjectData["readRatePercent"] * 100);
																					}

																					//these condition used for green img or red condition
																					if (validDomain["Properties"][0]["Property"][3]["Value"] != '' && readRateValue !== '') {
																						engagementimg = readRateValue >= validDomain["Properties"][0]["Property"][3]["Value"] ? '<img src="/images/read_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/read_red.png" alt="logo" heigth="12" width="15"></img>';
																					}
																					else {
																						engagementimg = '<img src="/images/engagement_idle.png" alt="logo" heigth="12" width="15"></img>';
																					}
																					if (readRateValue !== '' && validDomain["Properties"][0]["Property"][3]["Value"] != '') {
																						//these condition used for display issues only
																						readGreenimage = readRateValue >= validDomain["Properties"][0]["Property"][3]["Value"] ? 'true' : 'false';
																					} else {
																						//readGreenimage = 'true';
																						readGreenimage = 'gray';
																					}
																					//	var spfrange=response.data[ivar]["reputation"]["spf"];
																					if (response.data.subjectData["reputation"]) {
																						//these condition used for spfrange value null 
																						if (!response.data.subjectData["reputation"]["spf"]) {
																							//if value null set 0 for spf value
																							spfvalue = 0;
																						} if (!response.data.subjectData["reputation"]["spf"]["passPercentageWeighted"] && response.data.subjectData["reputation"]["spf"]["passPercentageWeighted"] !== 0) {
																							//if value null set 0 for spf value
																							spfvalue = '';
																						} else {
																							//  these condtion used for checking null passInboxPercentageWeighted
																							spfvalue = Math.round(response.data.subjectData["reputation"]["spf"]["passPercentageWeighted"] * 100);
																						}
																						if (!response.data.subjectData["reputation"]["dkim"]) {
																							//if value null set 0 for dkim value
																							dkimvalue = 0;
																						} if (!response.data.subjectData["reputation"]["dkim"]["passPercentageWeighted"] && response.data.subjectData["reputation"]["dkim"]["passPercentageWeighted"] !== 0) {
																							dkimvalue = '';
																						} else {
																							//  these condtion used for checking null passInboxPercentageWeighted
																							dkimvalue = Math.round(response.data.subjectData["reputation"]["dkim"]["passPercentageWeighted"] * 100);
																						}
																						if (validDomain["Properties"][0]["Property"][4]["Value"] != '' && spfvalue !== '') {
																							//these condition used for green img or red condition
																							spfimg = (spfvalue >= validDomain["Properties"][0]["Property"][4]["Value"]) ? '<img src="/images/spf_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/spf_red.png" alt="logo" heigth="12" width="15"></img>';
																						} else {
																							//these condition used for gray img
																							spfimg = '<img src="/images/spf_idle.png" alt="logo" heigth="12" width="15"></img>';
																						}
																						if (spfvalue !== '' && validDomain["Properties"][0]["Property"][4]["Value"] != '') {
																							//these condition used for display issues only
																							spfGreenimage = (spfvalue >= validDomain["Properties"][0]["Property"][4]["Value"]) ? 'true' : 'false';
																						} else {
																							//spfGreenimage = 'true';
																							spfGreenimage = 'gray';
																						}
																						//these condition used for green img or red condition
																						if (validDomain["Properties"][0]["Property"][5]["Value"] != '' && dkimvalue !== '') {
																							dkimimg = (dkimvalue >= validDomain["Properties"][0]["Property"][5]["Value"]) ? '<img src="/images/dkim_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/dkim_red.png" alt="logo" heigth="12" width="15"></img>';
																						} else {
																							dkimimg = '<img src="/images/dkim_idle.png" alt="logo" heigth="12" width="15"></img>';
																						}
																						if (dkimvalue !== '' && validDomain["Properties"][0]["Property"][5]["Value"] != '') {
																							//these condition used for display issues only
																							dkimGreenimage = (dkimvalue >= validDomain["Properties"][0]["Property"][5]["Value"]) ? 'true' : 'false';
																						} else {
																							//dkimGreenimage = 'true';
																							dkimGreenimage = 'gray';
																						}
																					} else {
																						spfimg = '<img src="/images/spf_idle.png" alt="logo" heigth="12" width="15"></img>';
																						dkimimg = '<img src="/images/dkim_idle.png" alt="logo" heigth="12" width="15"></img>';
																						//spfGreenimage = 'true';gray
																						//dkimGreenimage = 'true';
																						spfGreenimage = 'gray';
																						dkimGreenimage = 'gray';
																					}
																					campaign.push([json["journeyName"], response.data.subjectData["lastSeen"], str, readGreenimage, InboxGreenimage, dkimGreenimage, InboxImage, engagementimg, spfimg, dkimimg, spfGreenimage, json["activityname"], response.data.subjectData["campaignIdentifier"], "common"]);
																					// }
																					// } 
																				} else {
																					campaign.push([json["journeyName"], response.data.subjectData["lastSeen"], str, 'gray', 'gray', 'gray', '<img src="/images/inbox_idle.png" alt="logo" heigth="12" width="15"></img>', '<img src="/images/engagement_idle.png" alt="logo" heigth="12" width="15"></img>', '<img src="/images/spf_idle.png" alt="logo" heigth="12" width="15"></img>', '<img src="/images/dkim_idle.png" alt="logo" heigth="12" width="15"></img>', 'gray', json["activityname"], response.data.subjectData["campaignIdentifier"], "common"]);
																				}
																				
																			}
																			//this condition used for sparkpost subject calculation
																			else {
																				var str;
																				if (json["subject"].includes("'")) {
																					str = json["subject"];
																				} else {
																					str = json["subject"];
																				}
																				if (str.includes(",")) {
																					str = str.replaceAll(",", "");
																				}
																				campaign.push([json["journeyName"], 'true', str, 'gray', 'gray', 'gray', '<img src="/images/inbox_idle.png" alt="logo" heigth="12" width="15"></img>', '<img src="/images/engagement_idle.png" alt="logo" heigth="12" width="15"></img>', '<img src="/images/spf_idle.png" alt="logo" heigth="12" width="15"></img>', '<img src="/images/dkim_idle.png" alt="logo" heigth="12" width="15"></img>', 'gray', json["activityname"], '', "common"])
																			}

																			var campaignArray = undefined;
																			if (campaign.length > 0) {
																				campaign.sort().reverse();
																				var duplicate = [];
																				var duplicatesub = '';
																				/*campaignArray = campaign.filter(function (el, i) {
																					//duplicatesub = el[0] + ',' + el[2];
																					duplicatesub = el[0];
																					if (duplicate.indexOf(duplicatesub) == -1) {
																						duplicate.push(duplicatesub);
																						return true;
																					}
																					return false;

																				});
																				Promise.all(campaignArray);*/

																			}
																			if (campaign && campaign != undefined) {
																				//templatename.push([campaignArray.length, json["journeyName"], json["journeyStatus"], '<img class = "textalignImg" src="/images/flame_red.png', campaignArray, JourneyId, JourneyVersion]);
																				templatename.push([campaign.length, json["journeyName"], json["journeyStatus"], '<img class = "textalignImg" src="/images/flame_red.png', campaign, JourneyId, JourneyVersion]);
																				/*if (Customerlen) {
																					templatename.push([campaignArray.length, json["journeyName"], json["journeyStatus"], '<img class = "textalignImg" src="/images/flame_red.png', campaignArray, JourneyId, JourneyVersion]);
																				} else {
																					templatename.push([campaignArray.length, json["journeyName"], json["journeyStatus"], '<img class = "textalignImg" src="/images/flame_red.png', campaignArray, JourneyId, JourneyVersion]);
																				}*/
																			} else {
																				console.log("ERROR: The JB Subject didn't match any subject.  JB Subject: " + json["subject"]);
																				journeyCount--; //HACK: Handle the case where the subjects don't match at all.
																			}
																		}

																		console.log("journeyCount:" + journeyCount + ", templatelen:" + templatename.length);
																		if (journeyCount == templatename.length) {
																			templatename.sort(function (a, b) {
																				var a1 = a[0], b1 = b[0];
																				return b1 - a1;
																			});
																			var duplicate = [];
																			var duplicatesub = '';
																			var ret = new Array;

																			campaignArray = templatename.filter(function (el, i) {
																				if (duplicate.indexOf(el[1]) == -1) {
																					duplicate.push(el[1]);
																					return true;
																				}

																				return false;

																			});
																			var table = document.createElement("TABLE");
																			table.setAttribute('id', 'TableRec')
																			table.border = "0";
																			//Get the count of columns.
																			var columnCount = Headers[0].length;
																			//Add the header row.
																			var row = table.insertRow(-1);
																			for (var i = 0; i < columnCount; i++) {
																				var headerCell = document.createElement("TH");
																				if (i == 0) {
																					headerCell.width = '20%';
																				}
																				if (i == 1) {
																					headerCell.width = '35%';
																				}
																				if (i == 3) {
																					headerCell.width = '10%';
																				}
																				if (i == 4) {
																					headerCell.width = '20%';

																				}
																				headerCell.innerHTML = Headers[0][i];
																				row.appendChild(headerCell);
																			}
																			for (var i = 0; i < campaignArray.length; i++) {
																				row = table.insertRow(-1);
																				var flameIcon;
																				var grayIcon = false;
																				var greenIcon = false;
																				var redIcon = false; for (var j = 0; j < columnCount; j++) {
																					var cell = row.insertCell(-1);
																					if (j == 0) {
																						var templateCount = 0;
																						var sparkSubjectCount = 0;
																						for (var k = 0; k < campaignArray[i][4].length; k++) {
																							if (campaignArray[i][1] == campaignArray[i][4][k][0]) {
																								templateCount++;
																								if (campaignArray[i][4][k][1] == 'true') {
																									sparkSubjectCount++;
																								}
																								if (campaignArray[i][4][k][3] == 'gray' && campaignArray[i][4][k][4] == 'gray' && campaignArray[i][4][k][5] == 'gray' && campaignArray[i][4][k][10] == 'gray') {
																									//flameIcon='<img class = "textalignImg" src="/images/flame_gray.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>';
																									grayIcon = true;
																								}
																								else if (campaignArray[i][4][k][3] == 'false' || campaignArray[i][4][k][4] == 'false' || campaignArray[i][4][k][5] == 'false' || campaignArray[i][4][k][10] == 'false') {
																									//flameIcon='<img class = "textalignImg" src="/images/flame_red.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>';
																									//break;
																									redIcon = true;
																								} else if (campaignArray[i][4][k][3] == 'true' || campaignArray[i][4][k][4] == 'true' || campaignArray[i][4][k][5] == 'true' || campaignArray[i][4][k][10] == 'true') {
																									//flameIcon='<img class = "textalignImg" src="/images/flame_green.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>';
																									greenIcon = true;
																								}
																							}

																						}


																						var aTag = document.createElement("a");
																						aTag.setAttribute('href', "#");
																						aTag.setAttribute('class', "pointer spanTracker");
																						aTag.setAttribute('data-rowid', i + 1);
																						aTag.setAttribute('onclick', "dynamicTable(event,'" + escapeQuotes("" + campaignArray[i][4]) + "','" + escapeQuotes("" + campaignArray[i][1]) + "')");
																						if (sparkSubjectCount == 0) {
																							aTag.innerHTML = templateCount + '/' + templateCount;
																						} else {
																							aTag.innerHTML = (templateCount - sparkSubjectCount) + '/' + templateCount;
																						}
																						cell.appendChild(aTag);
																					} else if (j == 1) {
																						var aTag = document.createElement("a");
																						aTag.setAttribute('class', "atag pointer");
																						aTag.setAttribute('onclick', "MCJourney(event,'" + campaignArray[i][5] + "','" + campaignArray[i][6] + "')");
																						aTag.innerHTML = campaignArray[i][j];
																						cell.appendChild(aTag);
																					} else if (j == 3) {
																						if (grayIcon && !greenIcon && !redIcon) {
																							cell.innerHTML = '<img class = "textalignImg" src="/images/flame_gray.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>';
																						} else if (redIcon) {
																							cell.innerHTML = '<img class = "textalignImg" src="/images/flame_red.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>';
																						} else if (greenIcon) {
																							cell.innerHTML = '<img class = "textalignImg" src="/images/flame_green.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>';
																						}
																					}
																					else if (j == 4 || j == 5 || j == 6) {
																						var aTag = document.createElement("font");
																						aTag.setAttribute('style', "display:none");
																						aTag.innerHTML = campaignArray[i][j];
																						cell.appendChild(aTag);
																					}
																					else {
																						cell.innerHTML = campaignArray[i][j];
																					}
																				}
																			}
																			var dvTable = document.getElementById("dvTable");
																			dvTable.innerHTML = "";
																			dvTable.appendChild(table);

																			hideSpinner();

																		}
																	}).catch(function (error) {
																		console.log("error when getting status" + error);
																	});
															}
														}
													}).catch(function (error) {
														console.log("Error getting profile ID's mail" + error)
													});

													console.log("Sender profile ID ::: " + response.data.activity.activities[i].configurationArguments.triggeredSend.senderProfileId);
												}
											}
											/*if (!activity) {
												journeyCount++;
												var data = response.config.data;
												var json = JSON.parse(data);
												activityArray.push([json["name"], json["status"], json["journeyId"], '', '', json["version"]]);
											}*/
											//customers.push(['0/' + journeyCount, response.data.activity.name, 'Published', '<img class = "textalignImg" src="/images/flame_green.png" alt="logo" align = "center" height="30" width="30" style="margin-left: 21%;"></img>', response.data.activity.id]);


										}
									}
								})
								.catch(function (error) {
									console.log(error);
								})
						}
					}
					else {
						hideSpinner();
						document.getElementById("dvTable").style.display = "none";
						document.getElementById("journeymsg").style.display = "block";

					}
				}).catch(function (error) {
					console.log(error);
				})

		}



		function MCJourney(event, journeyid, journeyversion) {
			window.open(`https://mc.s11.exacttarget.com/cloud/#app
			/Journey%20Builder/%23${journeyid}/${journeyversion}`);

		}

		//watched campaigns table
		var lastDynamicTableTarget = undefined;
		function dynamicTable(event, templates, journeyName) {
			var attTog = document.getElementsByClassName('outerAttRow');
			var data = templates;
			templateArray = data.split(',common,').map(s => s.split(','));
			var rowCount = event.currentTarget.dataset.rowid;
			if (attTog.length > 0) {
				for (i = attTog.length - 1; i >= 0; i--) {
					attTog[i].parentNode.removeChild(attTog[i]);

				}
			}

			if (lastDynamicTableTarget != event.target) {
				rowCount = parseInt(rowCount) + 1;
				var oppTable = document.getElementById("TableRec");
				var outerTr = oppTable.insertRow(rowCount);
				outerTr.setAttribute('class', 'outerAttRow'); // TABLE ROW.
				var outerTd = document.createElement('th'); // TABLE DEFINITION.
				outerTd = outerTr.insertCell(0);
				outerTd.setAttribute('colspan', '10');
				var table = document.createElement("TABLE");
				table.setAttribute("style", "border: none;");

				var columnCount = templateArray[0].length - 1;

				for (var i = 0; i < templateArray.length; i++) {
					row = table.insertRow(-1);
					for (var j = 0; j < columnCount; j++) {
						if (journeyName == templateArray[i][0]) {

							if (j == 2) {
								var cell = row.insertCell(-1);
								cell.setAttribute('width', '30%');
								var str;
								if (templateArray[i][2].includes("'")) {
									str = templateArray[i][2].replaceAll(/'/g, "\\'");
								} else {
									str = templateArray[i][2];
								}
								var aTag = document.createElement("a");

								aTag.setAttribute('onclick', "openTabforCampaignPerformance(event, 'Campaign Performance', '" + i + "', '" + str + "','" + templateArray[i][12] + "');");
								aTag.setAttribute('class', "camp pointer");
								var fonttag = document.createElement("font");
								aTag.appendChild(fonttag);
								fonttag.setAttribute('style', "font-style: italic;");
								fonttag.innerHTML = "Name    :";
								var aTag1 = document.createElement("span");
								aTag.appendChild(aTag1);
								aTag1.innerHTML = " " + templateArray[i][11];
								var br = document.createElement("br");
								aTag1.appendChild(br);
								var fonttag1 = document.createElement("font");
								fonttag1.setAttribute('style', "font-style: italic;");
								fonttag1.innerHTML = "Subject :"
								aTag.appendChild(fonttag1);
								var aTag2 = document.createElement("span");
								aTag2.innerHTML = " " + templateArray[i][j];
								aTag.appendChild(aTag2);
								cell.appendChild(aTag);
							} else {
								var cell = row.insertCell(-1);

								if (j == 0) {
									cell.setAttribute('colspan', '6');
									var aTag = document.createElement("font");
									aTag.setAttribute('style', "display:none");
									aTag.innerHTML = templateArray[i][j];
									cell.setAttribute('style', 'width:20%');
									cell.appendChild(aTag);
								}
								else if (j == 1) {
									cell.setAttribute('colspan', '6');
									cell.setAttribute('style', 'width:2.5%');
								}
								else if (j == 3) {
									cell.setAttribute('colspan', '6');
									cell.setAttribute('style', 'width:7%');
								}
								else if (j == 4) {
									cell.setAttribute('colspan', '6');
									cell.setAttribute('style', 'width:4%');
								}
								else if (j == 5) {
									cell.setAttribute('colspan', '4');
									cell.setAttribute('style', 'width:9%');

								}
								else if (j == 6 || j == 7 || j == 8) {
									cell.innerHTML = templateArray[i][j];
								} else if (j == 9) {
									cell.setAttribute('colspan', '7');
									cell.setAttribute('style', 'width:16%');
									cell.innerHTML = templateArray[i][j];
								}
								else if (j == 10) {
									cell.setAttribute('colspan', '6');
									cell.setAttribute('style', 'width:40%');
								}
								else {
									cell.setAttribute('colspan', '6');
								}
							}
						}
					}
				}
				outerTd.appendChild(table);
				lastDynamicTableTarget = event.target;
			} else {
				lastDynamicTableTarget = undefined;
			}
		}


		function openCampaignPerformance(event, test) {
			document.getElementById('btncampaign').style.display = "block";
		}

		function showSpinner() {
			var elms = document.querySelectorAll("[id='spinner']");

			for (var i = 0; i < elms.length; i++) {
				elms[i].className = 'show';
			}
		}
		function hideSpinner() {
			var elms = document.querySelectorAll("[id='spinner']");

			for (var i = 0; i < elms.length; i++) {
				elms[i].className = "";
			}
		}

		function watchedCampaigns() {
			showSpinner();
			var campaigns = new Array();
			var ivar = 0;
			var Domains = {};
			//var UserId;
			let sparkpostUserId = $('#sparkpostUserId').val();
			let refreshtoken = $('#rt').val();
			let tssd = $('#tssd').val();
			let memberid = $('#memberid').val();
			let restInstance = $('#restInstance').val();
			let soapInstance = $('#soapInstance').val();
			let UserId = $('#accountId').val();
			console.log("user Id " + UserId);
			axios({
				method: "POST",
				url: "/retrievingDataExtensionRows",
				data: {
					refreshToken: refreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance
				}
			})
				.then(function (result) {
					if (result.data) {
						$('#rt').val(result.data.refreshToken);
						Domains = result.data.rawData;
						//Domains=result.data;
					}
					/*axios({
					   method: "GET",
					   url: "/sparkpostusersession",
					   })
					   .then((result) => {*/
					//UserId =result.data.accountID;
					axios({
						method: "POST",
						url: "/getstatus",
						data: { accountID: UserId },
					})
						.then(function (response) {
							if (response.data) {
								hideSpinner();
								for (ivar = 0; ivar < response.data.length; ivar++) {
									var volume = response.data[ivar]["rawInboxCount"] + response.data[ivar]["rawSpamCount"];
									var fromaddress = response.data[ivar]["fromAddress"];
									var domainName = fromaddress.split("@");
									var spfvalue;
									var spfimg;
									var dkimvalue;
									var dkimimg;
									var validDomain = {};
									var engagementimg;
									var InboxImage;
									var readRateValue;
									var readGreenimage;
									var InboxGreenimage;
									var dkimGreenimage; var spfGreenimage;
									for (var i = 0; i < Domains.length; i++) {
										if (domainName[1] == Domains[i]["Properties"][0]["Property"][1]["Value"]) {
											validDomain = Domains[i];
										}
									}
									if ((Object.keys(validDomain).length > 0) && (response.data[ivar]["rawInboxCount"] >= validDomain["Properties"][0]["Property"][6]["Value"])) {
										//	if(response.data[ivar]["reputation"]["spf"] && response.data[ivar]["reputation"]["dkim"]){
										//	if((Math.round(response.data[ivar]["reputation"]["dkim"]["passPercentageWeighted"]) || Math.round(response.data[ivar]["reputation"]["dkim"]["failPercentageWeighted"]) != 0 ) && (Math.round(response.data[ivar]["reputation"]["spf"]["passPercentageWeighted"]) || Math.round(response.data[ivar]["reputation"]["spf"]["failPercentageWeighted"]) != 0)){
										if ((validDomain["Properties"][0]["Property"][2]["Value"] != '' && response.data[ivar]["overallInboxPercentWeighted"]) || (validDomain["Properties"][0]["Property"][2]["Value"] !== '' && response.data[ivar]["overallInboxPercentWeighted"] === 0)) {
											InboxImage = (Math.round(response.data[ivar]["overallInboxPercentWeighted"] * 100) >= validDomain["Properties"][0]["Property"][2]["Value"]) ? '<img src="/images/inbox_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/inbox_red.png" alt="logo" heigth="12" width="15"></img>';
										} else {
											InboxImage = '<img src="/images/inbox_idle.png" alt="logo" heigth="12" width="15"></img>';
										}
										if (response.data[ivar]["overallInboxPercentWeighted"] || response.data[ivar]["overallInboxPercentWeighted"] === 0) {
											//these condition used for only issues only
											InboxGreenimage = (Math.round(response.data[ivar]["overallInboxPercentWeighted"] * 100) >= validDomain["Properties"][0]["Property"][2]["Value"]) ? 'true' : 'false';
										} else {
											InboxGreenimage = 'true';
										}
										if (!response.data[ivar]["readRatePercent"] && response.data[ivar]["readRatePercent"] !== 0) {
											readRateValue = '';
										} else {
											//these condtion used for checking null readRatePercent
											readRateValue = Math.round(response.data[ivar]["readRatePercent"] * 100);
										}
										
										//these condition used for green img or red condition
										if (validDomain["Properties"][0]["Property"][3]["Value"] != '' && readRateValue !== '') {
											engagementimg = readRateValue >= validDomain["Properties"][0]["Property"][3]["Value"] ? '<img src="/images/read_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/read_red.png" alt="logo" heigth="12" width="15"></img>';
										}
										else {
											engagementimg = '<img src="/images/engagement_idle.png" alt="logo" heigth="12" width="15"></img>';
										}
										if (readRateValue !== '') {
											//these condition used for display issues only
											readGreenimage = readRateValue >= validDomain["Properties"][0]["Property"][3]["Value"] ? 'true' : 'false';
										} else {
											readGreenimage = 'true';
										}
										//	var spfrange=response.data[ivar]["reputation"]["spf"];
										if (response.data[ivar]["reputation"]) {
											//these condition used for spfrange value null 
											if (!response.data[ivar]["reputation"]["spf"]) {
												//if value null set 0 for spf value
												spfvalue = 0;
											} if (!response.data[ivar]["reputation"]["spf"]["passPercentageWeighted"] && response.data[ivar]["reputation"]["spf"]["passPercentageWeighted"] !== 0) {
												//if value null set 0 for spf value
												spfvalue = '';
											} else {
												//  these condtion used for checking null passInboxPercentageWeighted
												spfvalue = Math.round(response.data[ivar]["reputation"]["spf"]["passPercentageWeighted"] * 100);
											}
											if (!response.data[ivar]["reputation"]["dkim"]) {
												//if value null set 0 for dkim value
												dkimvalue = 0;
											} if (!response.data[ivar]["reputation"]["dkim"]["passPercentageWeighted"]&& response.data[ivar]["reputation"]["dkim"]["passPercentageWeighted"] !== 0) {
												dkimvalue = '';
											} else {
												//  these condtion used for checking null passInboxPercentageWeighted
												dkimvalue = Math.round(response.data[ivar]["reputation"]["dkim"]["passPercentageWeighted"] * 100);
											}
											if (validDomain["Properties"][0]["Property"][4]["Value"] != '' && spfvalue !== '') {
												//these condition used for green img or red condition
												spfimg = (spfvalue >= validDomain["Properties"][0]["Property"][4]["Value"]) ? '<img src="/images/spf_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/spf_red.png" alt="logo" heigth="12" width="15"></img>';
											} else {
												//these condition used for gray img
												spfimg = '<img src="/images/spf_idle.png" alt="logo" heigth="12" width="15"></img>';
											}
											if (spfvalue !== '') {
												//these condition used for display issues only
												spfGreenimage = (spfvalue >= validDomain["Properties"][0]["Property"][4]["Value"]) ? 'true' : 'false';
											} else {
												spfGreenimage = 'true';
											}
											//these condition used for green img or red condition
											if (validDomain["Properties"][0]["Property"][5]["Value"] != '' && dkimvalue !== '') {
												dkimimg = (dkimvalue >= validDomain["Properties"][0]["Property"][5]["Value"]) ? '<img src="/images/dkim_green.png" alt="logo" heigth="12" width="15"></img>' : '<img src="/images/dkim_red.png" alt="logo" heigth="12" width="15"></img>';
											} else {
												dkimimg = '<img src="/images/dkim_idle.png" alt="logo" heigth="12" width="15"></img>';
											}
											if (dkimvalue !== '') {
												//these condition used for display issues only
												dkimGreenimage = (dkimvalue >= validDomain["Properties"][0]["Property"][5]["Value"]) ? 'true' : 'false';
											} else {
												dkimGreenimage = 'true';
											}
										} else {
											spfimg = '<img src="/images/spf_idle.png" alt="logo" heigth="12" width="15"></img>';
											dkimimg = '<img src="/images/dkim_idle.png" alt="logo" heigth="12" width="15"></img>';
											spfGreenimage = 'true';
											dkimGreenimage = 'true';
										}
										if ((InboxGreenimage == 'false') || (readGreenimage == 'false') || (spfGreenimage == 'false') || (dkimGreenimage == 'false')) {
											campaigns.push([response.data[ivar]["lastSeen"].split("T")[0], response.data[ivar]["subject"], response.data[ivar]["campaignIdentifier"], response.data[ivar]["fromAddress"], volume, InboxImage, engagementimg, spfimg, dkimimg, "OPEN"]);
										}
										//	}
										//	} 
									}
								}
								if (campaigns.length > 0) {
									var headers = new Array();
									headers.push(["Last Seen", "Subject", "X-Job", "From Address", "Sample", "Inbox", "Read", "SPF", "DKIM", "Details"]);
									var table = document.createElement("TABLE");
									table.border = "1";
									table.setAttribute('style', 'border-color: white;')
									var columnCount = headers[0].length;
									var row = table.insertRow(-1);
									row.setAttribute('style', 'background-color: navy;color: white;');
									for (var i = 0; i < columnCount; i++) {
										var headerCell = document.createElement("TH");
										headerCell.innerHTML = headers[0][i];
										//var cell = row.insertCell(-1);
										if (i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9) {
											headerCell.setAttribute('style', "text-align:center;width:3%");
										}
										if (i == 0) {
											headerCell.setAttribute('style', "width:6%");
										}
										if (i == 2) {
											headerCell.setAttribute('style', "width:8%");
										}
										if (i == 3) {
											headerCell.setAttribute('style', "width:21%");
										}
										row.appendChild(headerCell);
									}
									for (var i = 0; i < campaigns.length; i++) {
										row = table.insertRow(-1);
										if (i % 2 == 0) {
											row.setAttribute('style', 'background-color: #faf3e9;');
										} else {
											row.setAttribute('style', 'background-color : #e7e6e6');
										}
										for (var j = 0; j < columnCount; j++) {
											var cell = row.insertCell(-1);
											if (j == 0) {
												cell.innerHTML = campaigns[i][j];
											}
											if (j == 4 || j == 5 || j == 6 || j == 7 || j == 8 || j == 9) {
												cell.setAttribute('style', "text-align:center");
											}
											if (j == 9) {
												var aTag = document.createElement("button");
												aTag.setAttribute('style', "background-color: #fa6223;color: white;border-radius: 3px;border-color: #fa6223;");
												var str;
												if (campaigns[i][1].includes("'")) {
													str = campaigns[i][1].replaceAll(/'/g, "\\'");
												} else {
													str = campaigns[i][1];
												}
												aTag.setAttribute('onclick', "openTabforCampaignPerformance(event, 'Campaign Performance', '" + i + "', '" + str + "','" + campaigns[i][2] + "');");
												aTag.innerHTML = campaigns[i][j];
												cell.appendChild(aTag);
											} else {
												cell.innerHTML = campaigns[i][j];
											}
										}
									}
									var dvTable = document.getElementById("dv1Table");
									dv1Table.innerHTML = "";
									dv1Table.appendChild(table);
								} else {
									document.getElementById("impactedmsg").style.display = "block";
								}
							}
						})
						.catch(function (error) {
							console.log("error when getting status" + error);
						});
				}).catch(function (error) {
					console.log("error when getting dataextension" + error);
				});
			/*})
			.catch((err) => {
				console.log("error, getting all accountid" + err);
			  
			});*/
		}





		function hidecampaign() {
			var CompaignButton = document.getElementById("btncampaign");
			CompaignButton.style.display = "none";
		}


		function Showtracker() {
			var CompaignButton = document.getElementById("btntracker");
			CompaignButton.style.display = "block";
		}

		function hidetracker() {
			var CompaignButton = document.getElementById("btntracker");
			CompaignButton.style.display = "none";
		}

		function trackersummary() {
			let customers = [];
			let sparkpostUserId = $('#sparkpostUserId').val();
			console.log("tracker Summary sparkpost user Id ::: " + sparkpostUserId)
			let refreshtoken = $('#rt').val();
			let tssd = $('#tssd').val();
			let memberid = $('#memberid').val();
			let restInstance = $('#restInstance').val();
			let soapInstance = $('#soapInstance').val();
			let FolderID = $('#FolderID').val();
			let accountId = $('#accountId').val();
			axios({
				method: "GET",
				url: "/getsessionavailabledomains",
				params: { accountId: accountId }
			})
				.then(function (response) {
					DomainData = response.data.Domains;
					console.log("Domain Data response ::: " + JSON.stringify(response.data.Domains));
					DomainData &&
						DomainData.map((api) => {
							console.log("API ::: " + api);
							axios({
								method: "POST",
								url: "/retrievingDataExtensionRows",
								data: {
									"domainvalue": api.domain,
									refreshToken: refreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance, FolderID: FolderID
								}
							})
								.then(function (response) {
									console.log("response ::: " + JSON.stringify(response.data));
									if (response.data) {
										$('#rt').val(response.data.refreshToken);
										for (var i = 0; i < response.data.rawData.length; i++) {
											customers.push(response.data.rawData[i]["Properties"]);
										}

										var headers = new Array();
										headers.push(["Domain Name", "Inbox Rate", "Read Rate", "SPF", "DKIM", "Campaign Min.", "Intelliseed Lists", "Configured by", " "]);
										var table = document.createElement("TABLE");
										var colgroup = document.createElement("COLGROUP");

										table.border = "1";
										table.setAttribute('style', 'border-color: white;width : 100%')
										var columnCount = headers[0].length;
										var row = table.insertRow(-1);
										row.setAttribute('style', 'background-color: navy;color: white;');
										for (var i = 0; i < columnCount; i++) {
											var col = document.createElement("COL");
											col.setAttribute('style', 'width : 20%');
											colgroup.appendChild(col);
											var headerCell = document.createElement("TH");
											if (headers[0][i] == 'Domain Name') {
												headerCell.setAttribute('style', 'width:250px');
											}
											if (i == 1 || i == 2 || i == 3 || i == 4 || i == 5) {
												headerCell.setAttribute('style', "text-align : center")
											}
											headerCell.innerHTML = headers[0][i];
											row.appendChild(headerCell);

										}
										for (var i = 0; i < customers.length; i++) {
											row = table.insertRow(-1);
											if (i == 0) {
												row.setAttribute('style', 'background-color: #faf3e9;');
											}
											if (i % 2 == 0) {
												row.setAttribute('style', 'background-color: #faf3e9;');
											} else {
												row.setAttribute('style', 'background-color : #e7e6e6');
											}
											for (var j = 0; j < columnCount; j++) {
												var cell = row.insertCell(-1);
												if (j == 1 || j == 2 || j == 3 || j == 4) {
													const regex = /\d/;
													cell.setAttribute('style', "text-align : center");
													cell.innerHTML = regex.test(customers[i][0]["Property"][j + 1]["Value"]) ? customers[i][0]["Property"][j + 1]["Value"] + "%" : "";
												}
												else if (j == 5) {
													cell.setAttribute('style', "text-align : center");
													var campaignMin = customers[i][0]["Property"][j + 1]["Value"] != null || customers[i][0]["Property"][j + 1]["Value"] != "" ? customers[i][0]["Property"][j + 1]["Value"].toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : "";
													cell.innerHTML = campaignMin;
												}
												else if (j == 8) {
													var aTag = document.createElement("button");
													cell.setAttribute('style', "text-align : center");
													aTag.setAttribute('onclick', "setupPage('" + customers[i][0]["Property"][1]["Value"] + "','" + customers[i][0]["Property"][2]["Value"] + "','" + customers[i][0]["Property"][3]["Value"] + "','" + customers[i][0]["Property"][4]["Value"] + "','" + customers[i][0]["Property"][5]["Value"] + "','" + customers[i][0]["Property"][6]["Value"] + "','" + customers[i][0]["Property"][7]["Value"] + "','" + customers[i][0]["Property"][10]["Value"] + "')");
													aTag.setAttribute('style', "background-color: #fa6223;color: white;border-radius: 3px;border-color: #fa6223;");
													aTag.innerHTML = "open";
													cell.appendChild(aTag);
												}

												else if (j == 7) {
													cell.innerHTML = customers[i][0]["Property"][10]["Value"];
												}
												else {
													cell.innerHTML = customers[i][0]["Property"][j + 1]["Value"];
												}
											}
										}
										var dvTable = document.getElementById("dv3Table");
										dv3Table.innerHTML = "";
										dv3Table.appendChild(table);
									}
								})
								.catch(function (error) {
									console.log(error);
								})
						})
				}).catch(function (error) {
					console.log(error);
				})

		}



		window.onclick = function (event) {
			if (!event.target.matches('.dropbtn')) {
				var dropdowns = document.getElementsByClassName("dropdown-content");
				var i;
				for (i = 0; i < dropdowns.length; i++) {
					var openDropdown = dropdowns[i];
					if (openDropdown.classList.contains('show')) {
						openDropdown.classList.remove('show');
					}
				}
			}
		}
		function setupPage(Domainname, InboxValue, EngagementValue, SPFValue, DKIMValue, Campaignvalue, IntelliseedValue, UserName) {
			let DomainData;
			let IntelliseedData;
			let inboxRangeChanges = InboxValue != 0 ? true : false;
			let readRangeChanges = EngagementValue != 0 ? true : false;
			let SPFRangeChanges = SPFValue != 0 ? true : false;
			let DKIMRangeChanges = DKIMValue != 0 ? true : false;
			let campaignRangeChanges = Campaignvalue != 0 ? true : false;
			let toggledIntelliseed = [];
			let tssdVal = $('#tssd').val();
			let codeVal = $('#code').val();
			let rt = $('#rt').val();
			let memberid = $('#memberid').val();
			let restInstance = $('#restInstance').val();
			let soapInstance = $('#soapInstance').val();
			let FolderID = $('#FolderID').val();
			let rowCount = $('#rowCount').val();
			let DEexternalKeyDomainConfiguration = $('#DEexternalKeyDomainConfiguration').val();
			let DEexternalKeyIntelliseedLists = $('#DEexternalKeyIntelliseedLists').val();
			let sparkpostUserId = $('#sparkpostUserId').val();
			let accountId = $('#accountId').val();
			axios({
				method: "GET",
				url: "/getsessionavailabledomains",
				params: { accountId: accountId }
			})
				.then(function (response) {
					DomainData = JSON.stringify(response.data.Domains);
					axios({
						method: "GET",
						url: "/getintelliseedsession",
						params: { accountId: accountId }
					})
						.then(function (response) {
							IntelliseedData = JSON.stringify(response.data.Intelliseed);
							if (IntelliseedData != undefined && IntelliseedData != '') {
								window.location.assign(`/sparkpostdashboard?pagenumber=2&domainname=${Domainname}&inboxvalue=${InboxValue}&engagementValue=${EngagementValue}&spfvalue=${SPFValue}&dkimvalue=${DKIMValue}&campaignvalue=${Campaignvalue}&intelliseedvalue=${IntelliseedValue}&username=${UserName}&domaindata=${DomainData}&intelliseeddata=${IntelliseedData}&inboxRangeChanges=${inboxRangeChanges}&readRangeChanges=${readRangeChanges}&SPFRangeChanges=${SPFRangeChanges}&DKIMRangeChanges=${DKIMRangeChanges}&campaignRangeChanges=${campaignRangeChanges}&tssd=${tssdVal}&rt=${rt}&memberid=${memberid}&restInstance=${restInstance}&soapInstance=${soapInstance}&FolderID=${FolderID}&rowCount=${rowCount}&DEexternalKeyDomainConfiguration=${DEexternalKeyDomainConfiguration}&DEexternalKeyIntelliseedLists=${DEexternalKeyIntelliseedLists}&accountId=${accountId}`);
							}
						})
						.catch(function (error) {
							console.log("errorintellisedd" + error);
						});

				})
				.catch(function (error) {
					console.log("errordomain" + error);
				});



		}

		function openTab(evt, cityName) {
			;
			if (cityName == 'Campaign Performance') {
				document.getElementById('btncampaign').style.display = "block";
				$("#btsplink1").attr("href", "https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css");
				$("#btsplink2").attr("src", "https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js");
				$("#btsplink3").attr("src", "https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js");
				$("#btsplink4").attr("src", "/js/progresscircle.js");
				$("#btsplink5").attr("href", "/css/progresscircle.css");
			}
			else if (cityName == 'Setup') {
				let codeVal = $('#code').val();
				let tssdVal = $('#tssd').val();
				let rt = $('#rt').val();
				let memberid = $('#memberid').val();
				let restInstance = $('#restInstance').val();
				let soapInstance = $('#soapInstance').val();
				let FolderID = $('#FolderID').val();
				let rowCount = $('#rowCount').val();
				let DEexternalKeyDomainConfiguration = $('#DEexternalKeyDomainConfiguration').val();
				let DEexternalKeyIntelliseedLists = $('#DEexternalKeyIntelliseedLists').val();
				let sparkpostUserId = $('#sparkpostUserId').val();
				let accountId = $('#accountId').val();
				axios({
					method: "GET",
					url: "/getsessionavailabledomains",
					params: { accountId: accountId }
				})
					.then(function (response) {
						DomainData = JSON.stringify(response.data.Domains);
						axios({
							method: "GET",
							url: "/getintelliseedsession",
							params: { accountId: accountId }
						})
							.then(function (response) {
								IntelliseedData = JSON.stringify(response.data.Intelliseed);
								window.location.assign(`/sparkpostdashboard?pagenumber=2&domaindata=${DomainData}&intelliseeddata=${IntelliseedData}&username=${sparkpostUserId}&domainname=${""}&inboxvalue=${""}&engagementValue=${""}&spfvalue=${""}&dkimvalue=${""}&campaignvalue=${""}&intelliseedvalue=${""}&username=${""}&domaindata=${""}&intelliseeddata=${""}&inboxRangeChanges=${""}&readRangeChanges=${""}&SPFRangeChanges=${""}&DKIMRangeChanges=${""}&campaignRangeChanges=${""}&tssd=${tssdVal}&rt=${rt}&memberid=${memberid}&restInstance=${restInstance}&soapInstance=${soapInstance}&FolderID=${FolderID}&rowCount=${rowCount}&DEexternalKeyDomainConfiguration=${DEexternalKeyDomainConfiguration}&DEexternalKeyIntelliseedLists=${DEexternalKeyIntelliseedLists}&accountId=${accountId}`);
								/*axios({
									method: "GET",
									url: "/sparkpostusersession",
								  })
								   .then(function (response) {
									  UserId=JSON.parse(JSON.stringify(response.data.UserId));
									  console.log("In Dashboard, user Name : " + IntelliseedData);
									  if(UserId != undefined && UserId != '')	{
										
									   }
									})
									.catch(function (error) {
									  console.log("errorintellisedd" + error);
									});*/

							})
							.catch(function (error) {
								console.log("errorintellisedd" + error);
							});

					})
					.catch(function (error) {
						console.log("errordomain" + error);
					});

			}

			else {

				$("#btsplink1").attr("href", "");
				$("#btsplink2").attr("src", "");
				$("#btsplink3").attr("src", "");
				$("#btsplink4").attr("src", "");
				$("#btsplink5").attr("href", "");
				$("#newboostrap").attr("href", "");
				$("#bootstrapScript").attr("src", "");

			}

			var i, tabcontent, tablinks;
			tabcontent = document.getElementsByClassName("tabcontent");

			for (i = 0; i < tabcontent.length; i++) {
				tabcontent[i].style.display = "none";
			}
			tablinks = document.getElementsByClassName("tablinks");
			for (i = 0; i < tablinks.length; i++) {
				tablinks[i].className = tablinks[i].className.replace(" active", "");
			}
			document.getElementById(cityName).style.display = "block";
			evt.currentTarget.className += " active";
			var span = document.getElementById(cityName + 'Span');
			if (!span.className.includes('bttnBorder'))
				span.className += " bttnBorder";

			if (cityName != 'Dashboard') {
				var span = document.getElementById('DashboardSpan');
				span.className = span.className.replace(" bttnBorder", "");
			}

			if (cityName != 'Journey Performance') {
				var span = document.getElementById('Journey PerformanceSpan');
				span.className = span.className.replace(" bttnBorder", "");
			}

			if (cityName != 'Watched Campaigns') {
				var span = document.getElementById('Watched CampaignsSpan');
				span.className = span.className.replace("bttnBorder", "");
			}

			if (cityName != 'Campaign Performance') {
				var span = document.getElementById('Campaign PerformanceSpan');
				span.className = span.className.replace("bttnBorder", "");
			}


		}

		function openTabforCampaignPerformance(evt, cityName, i, subject, xjob) {
			var currentSubjectNumber = 0;
			if (cityName == 'Campaign Performance') {
				document.getElementById('btncampaign').style.display = "block";
				$("#newboostrap").attr("href", "css/bootstrap.min.css");
				$("#bootstrapScript").attr("src", "js/bootstrap.min.js");
				//var UserId;
				let x_jobSplitted = xjob.split("_");
				let jobId = x_jobSplitted[1];
				//	let rtVal = $('#rt').val();
				let refreshtoken = $('#rt').val();
				let tssd = $('#tssd').val();
				let memberid = $('#memberid').val();
				let restInstance = $('#restInstance').val();
				let soapInstance = $('#soapInstance').val();
				let FolderID = $('#FolderID').val();
				let UserId = $('#accountId').val();
				console.log("user Id " + UserId);
				axios({
					method: "POST",
					url: "/sendstatsrow",
					data: { xjob: jobId, refreshToken: refreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance, FolderID: FolderID },
				})
					.then((result) => {
						$('#rt').val(result.data.refreshToken);
						//console.log("Result : : : " + (result.data[0]["Properties"][0]["Property"][2]["Value"]/result.data[0]["Properties"][0]["Property"][1]["Value"]*100).toFixed(2) + " ::: "+(result.data[0]["Properties"][0]["Property"][3]["Value"]/result.data[0]["Properties"][0]["Property"][1]["Value"]*100).toFixed(2))
						$("#sendData").attr("data-percent", ((result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] - result.data.rawData[0]["Properties"][0]["Property"][7]["Value"]) / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100) <= 100 ? ((result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] - result.data.rawData[0]["Properties"][0]["Property"][7]["Value"]) / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100).toFixed(2) : 100);
						$("#openData").attr("data-percent", (result.data.rawData[0]["Properties"][0]["Property"][2]["Value"] / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100) <= 100 ? (result.data.rawData[0]["Properties"][0]["Property"][2]["Value"] / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100).toFixed(2) : 100);
						$("#clickData").attr("data-percent", (result.data.rawData[0]["Properties"][0]["Property"][3]["Value"] / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100) <= 100 ? (result.data.rawData[0]["Properties"][0]["Property"][3]["Value"] / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100).toFixed(2) : 100);
						$("#unSubData").attr("data-percent", (result.data.rawData[0]["Properties"][0]["Property"][4]["Value"] / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100) <= 100 ? (result.data.rawData[0]["Properties"][0]["Property"][4]["Value"] / result.data.rawData[0]["Properties"][0]["Property"][1]["Value"] * 100).toFixed(2) : 100);
					})
					.catch(function (error) {
						console.log("Error ::: " + error);
					});

				//called for 
				let newrefreshtoken = $('#rt').val();

				axios({
					method: "POST",
					url: "/bouncestatsrow",
					data: { xjob: jobId, refreshToken: newrefreshtoken, tssd: tssd, memberid: memberid, soapInstance: soapInstance, restInstance: restInstance, FolderID: FolderID },
				})
					.then((result) => {
						console.log("Result bouncestatsrow : : : " + JSON.stringify(result.data.length))
						$('#rt').val(result.data.refreshToken);
						for (var i = 0; i < result.data.rawData.length; i++) {
							if (result.data.rawData[i]["Properties"][0]["Property"][3]["Value"] == "Soft bounce") {
								$("#softBounce").html("Soft (" + result.data.rawData[i]["Properties"][0]["Property"][2]["Value"] + ")");
							}
							else if (result.data.rawData[i]["Properties"][0]["Property"][3]["Value"] == "Hard bounce") {
								$("#hardBounce").html("Hard (" + result.data.rawData[i]["Properties"][0]["Property"][2]["Value"] + ")");
							}
							else {
								$("#blockBounce").html("Block (" + result.data.rawData[i]["Properties"][0]["Property"][2]["Value"] + ")");
							}
						}
					})
					.catch(function (error) {
						console.log("Error ::: " + error);
					});
				/*axios({
					method: "GET",
					url: "/sparkpostusersession",
					})
					.then((result) => {
					  UserId =result.data.accountID;*/
				axios({
					method: "POST",
					url: "/getstatus",
					data: { accountID: UserId },
				})
					.then(function (response) {
						var x;
						var dynamicDiv = '';
						if (xjob !== "null" || !xjob) {
							for (x = 0; x < response.data.length; x++) {
								if (response.data[x]["campaignIdentifier"] == xjob) {
									currentSubjectNumber = x;
								}
							}
							document.getElementById("campaignPerformanceSubject").innerHTML = "Email  Deliverability Performance - " + subject + " (X-job : " + xjob + ")";
						}
						else {
							for (x = 0; x < response.data.length; x++) {
								if (response.data[x]["subject"] == subject) {
									currentSubjectNumber = x;
								}
								document.getElementById("campaignPerformanceSubject").innerHTML = "Email  Deliverability Performance - " + subject;
							}
						}
						var today = new Date();
						var hours = today.getHours();
						var ampm = hours >= 12 ? 'PM' : 'AM';
						hours = hours % 12;
						hours = hours ? hours : 12; // the hour '0' should be '12'
						var strTime = hours + ':00 ' + ampm;
						var date = (today.getMonth() + 1) + '/' + today.getDate() + '/' + (today.getFullYear().toString().substr(-2)) + ' ' + strTime;
						document.getElementById("currentDate").innerHTML = "as of " + date;
						let firstSeen = response.data[currentSubjectNumber]["firstSeen"].split("T")[0];
						let lastSeen = response.data[currentSubjectNumber]["lastSeen"].split("T")[0];
						let firstSeenReplaced = firstSeen.replace(/[-]/g, "/");
						let lastSeenReplaced = lastSeen.replace(/[-]/g, "/");
						var date1 = new Date(firstSeenReplaced);
						var date2 = new Date(lastSeenReplaced);
						var Difference_In_Time = date2.getTime() - date1.getTime();
						var Difference_In_Days = (Difference_In_Time / (1000 * 3600 * 24)) + 1;
						document.getElementById("daysActive").innerHTML = "Days : " + Difference_In_Days;
						document.getElementById("engagementDetailSubject").value = subject;
						document.getElementById("firstSeenCP").innerHTML = "First Seen:&nbsp&nbsp" + response.data[currentSubjectNumber]["firstSeen"].split("T")[0] + "&nbsp&nbsp";
						document.getElementById("lastSeenCP").innerHTML = "Last Seen:&nbsp&nbsp " + response.data[currentSubjectNumber]["lastSeen"].split("T")[0] + "\t";
						document.getElementById("ReadRange").innerHTML = Math.round(parseInt(response.data[currentSubjectNumber]["readRatePercent"] * 100)) + "%";
						document.getElementById("DeleteRange").innerHTML = Math.round(parseInt(response.data[currentSubjectNumber]["deleteRatePercent"] * 100)) + "%";
						document.getElementById("ReadDeleteRange").innerHTML = Math.round(parseInt(response.data[currentSubjectNumber]["readDeleteRatePercent"] * 100)) + "%";
						document.getElementById("SpamRate").innerHTML = (Math.round(parseInt(response.data[currentSubjectNumber]["overallSpamPercentWeighted"] * 100))).toFixed(2) + "%";
						document.getElementById("imageUrl").src = response.data[currentSubjectNumber]["imageDownloadUrl"];
						var elem = document.getElementById('ReadRangeBar');
						elem.style.width = Math.round(parseInt(response.data[currentSubjectNumber]["readRatePercent"] * 100)) + "%";
						var delelem = document.getElementById('deleteRangeBar');
						delelem.style.width = Math.round(parseInt(response.data[currentSubjectNumber]["deleteRatePercent"] * 100)) + "%";
						var Readdelelem = document.getElementById('readDeleteRangeBar');
						Readdelelem.style.width = Math.round(parseInt(response.data[currentSubjectNumber]["readDeleteRatePercent"] * 100)) + "%";
						var dataPercentage = Math.ceil(response.data[currentSubjectNumber]["overallInboxPercentWeighted"] * 100);
						let SPFPercentage = response.data[currentSubjectNumber]["reputation"]["spf"]["passPercentageWeighted"] != null ? Math.round(response.data[currentSubjectNumber]["reputation"]["spf"]["passPercentageWeighted"] * 100) : 0;
						var DKIMPercentage = response.data[currentSubjectNumber]["reputation"]["dkim"]["passPercentageWeighted"] = !null ? Math.round(response.data[currentSubjectNumber]["reputation"]["dkim"]["passPercentageWeighted"] * 100) : 0;
						var dynamicDiv = "";
						var campaignID = response.data[currentSubjectNumber]["campaignId"];
						var fromaddress = response.data[currentSubjectNumber]["fromAddress"];
						var domainName = fromaddress.split("@");
						$("#viewCampaignDetails").attr("href", "https://sfmc.emailanalyst.com/bin/#/inbox/campaign/" + campaignID + "?tabFocus=active&domains=" + domainName[1] + "&days=30&includePanel=true&includeSeed=true&includeVirtual=true&ispWeight=false");
						$("#viewCampaignDetails").attr("target", "_blank");
						$("#campaignRateCircle").attr("data-percent", dataPercentage);
						$("#SPFPercentage").attr("data-percent", SPFPercentage);
						$("#DKIMPercentage").attr("data-percent", DKIMPercentage);
						$(".progress-bar").loading();
						if ($('.row').length > 0) {
							$('#ISPdynamic').empty();
						}
						var ispPlacements = JSON.parse(JSON.stringify(response.data[currentSubjectNumber]["ispPlacements"]))
						ispPlacements.sort(function (a, b) {
							if (a.ispName < b.ispName) return -1
							return a.ispName > b.ispName ? 1 : 0
						});

						for (var i = 0; i < ispPlacements.length; i++) {
							if (i % 2 == 0) {
								dynamicRowDiv = $('<div class="row" id="Campaignrow">');
								$('#ISPdynamic').append(dynamicRowDiv);
							}
							let roundedPercentage = ispPlacements[i]["inboxPercentage"] * 100 + "%";
							dynamicDiv = $('<div class="col-lg-6 col-12 d-flex">'
								+ '<div class="square"></div>'
								+ '<div class="progressDiv delivery_progress">'
								+ '<p>' + ispPlacements[i]["ispName"] + '</p>'
								+ '<div class="progress">'
								+ '<div class="progress-bar success" role="progressbar" style="width:' + roundedPercentage + '"' + 'aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>'
								+ '</div>'
								+ '<p>' + "Volume :" + (parseInt(ispPlacements[i]["inboxRawCount"]) + parseInt(ispPlacements[i]["spamRawCount"])) + '</p>'
								+ '</div>'
								+ '</div>');

							$('#Campaignrow').append(dynamicDiv);

							if (i % 2 != 0) {
								dynamicEndRowDiv = $('</div>');
								$('#ISPdynamic').append(dynamicEndRowDiv);
							}

						}
					})
					.catch(function (error) {
						console.log("error on get status " + error);
					});
			} else {

				//$("#btsplinkMain").attr("href","css/Main.css");
				$("#btsplink1").attr("href", "");
				$("#btsplink2").attr("src", "");
				$("#btsplink3").attr("src", "");
				$("#btsplink4").attr("src", "");
				$("#btsplink5").attr("href", "");
				$("#newboostrap").attr("href", "");
				$("#bootstrapScript").attr("src", "");

			}

			var i, tabcontent, tablinks;
			tabcontent = document.getElementsByClassName("tabcontent");

			for (i = 0; i < tabcontent.length; i++) {
				tabcontent[i].style.display = "none";
			}
			tablinks = document.getElementsByClassName("tablinks");
			for (i = 0; i < tablinks.length; i++) {
				tablinks[i].className = tablinks[i].className.replace(" active", "");
			}
			document.getElementById(cityName).style.display = "block";
			evt.currentTarget.className += " active";
			var span = document.getElementById(cityName + 'Span');
			if (!span.className.includes('bttnBorder'))
				span.className += " bttnBorder";

			if (cityName != 'Dashboard') {
				var span = document.getElementById('DashboardSpan');
				span.className = span.className.replace(" bttnBorder", "");
			}

			if (cityName != 'Journey Performance') {
				var span = document.getElementById('Journey PerformanceSpan');
				span.className = span.className.replace(" bttnBorder", "");
			}

			if (cityName != 'Watched Campaigns') {
				var span = document.getElementById('Watched CampaignsSpan');
				span.className = span.className.replace("bttnBorder", "");
			}

			if (cityName != 'Campaign Performance') {
				var span = document.getElementById('Campaign PerformanceSpan');
				span.className = span.className.replace("bttnBorder", "");
			}


		}

		function myFunction() {
			document.getElementById("myDropdown").classList.toggle("show");
		}
		$(document).ready(function () {
			const url = new URL(window.location.href);
			const tssd = url.searchParams.get("tssd");
			const code = url.searchParams.get("code");
			const rt = url.searchParams.get("rt");
			const memberid = url.searchParams.get("memberid");
			const restInstance = url.searchParams.get("restInstance");
			const soapInstance = url.searchParams.get("soapInstance");
			const FolderID = url.searchParams.get("FolderID");
			const accountId = url.searchParams.get("accountId");
			const ButtonId = url.searchParams.get("buttonid");
			const sparkpostUserId = url.searchParams.get("userid");
			const rowCount = url.searchParams.get("rowCount");
			const DEexternalKeyDomainConfiguration = url.searchParams.get("DEexternalKeyDomainConfiguration");
			const DEexternalKeyIntelliseedLists = url.searchParams.get("DEexternalKeyIntelliseedLists");
			console.log("redirected ::: " + rt + " \n" + "Others  " + memberid + "\n" + restInstance + "\n" + soapInstance + "\n" + FolderID + "\n" + rowCount + "\n" + DEexternalKeyDomainConfiguration + "\n" + DEexternalKeyIntelliseedLists + "\n");
			console.log("TSSD : " + tssd);
			$('#tssd').val(tssd);
			$('#code').val(code);
			$('#rt').val(rt);
			$('#memberid').val(memberid);
			$('#restInstance').val(restInstance);
			$('#soapInstance').val(soapInstance);
			$('#FolderID').val(FolderID);
			$('#sparkpostUserId').val(sparkpostUserId);
			$('#rowCount').val(rowCount);
			$('#DEexternalKeyDomainConfiguration').val(DEexternalKeyDomainConfiguration);
			$('#DEexternalKeyIntelliseedLists').val(DEexternalKeyIntelliseedLists);
			$('#accountId').val(accountId);
			if (ButtonId != undefined) {
				document.getElementById(ButtonId).click();
			}
			else {
				document.getElementById('defaultOpen').click();
			}
		})
	</script>
	</div>
</body>

</html>
