<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
    <script src="https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js"></script>

    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.0/axios.min.js"
      integrity="sha512-DZqqY3PiOvTP9HkjIWgjO6ouCbq+dxqWoJZ/Q+zPYNHmlnI2dQnbJ5bxAHpAMw+LXRm4D72EIRXzvcHQtE8/VQ=="
      crossorigin="anonymous"
    ></script>

    <script
      src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
      integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"
      integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"
      integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm"
      crossorigin="anonymous"
    ></script>

    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <!-- Icon -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
    />
    <link rel="stylesheet" type="text/css" href="/css/sparkpost.css" />
  </head>
  <body class="bodydesign">
    <div class="row">
      <div class="col-md-2"></div>
      <div class="col-md-8" id="mydiv"></div>
      <div class="col-md-2"></div>
    </div>

    <script>
      let tssd = "<%-tssd%>";
      //  let tssd = "<%= typeof tssd != 'undefined' ? tssd : 'default' %>";
    </script>

    <script type="text/babel">
      function AddLogorow(abcd, second) {
        return (
          <div class="e1logorowpadding epaddingbottom12">
            <div>
              <img src="/images/sparkpost-logo.png" width="120" height="31" />
            </div>
          </div>
        );
      }

      function AddBackButton(page, btnclick, btnclass) {
        if (page > 1) {
          return (
            <button onClick={btnclick} class={btnclass}>
              Back
            </button>
          );
        } else {
          return "";
        }
      }

      function AddButtonBlock(
        cancelclick,
        nextclick,
        nextbtntext,
        btnclass,
        backclick,
        pageno
      ) {
        return (
          <div class="e1container2">
            <div class="row">
              <div class="col-md-2 pull-left"></div>
              <div class="col-md-7" id="mydiv"></div>
              <div class="col-md-3">
                <button onClick={nextclick} class={btnclass}>
                  {nextbtntext}
                </button>
                {AddBackButton(pageno, backclick, btnclass)}
              </div>
            </div>
          </div>
        );
      }

      function getmarginWidth(step) {
        let margin = "56%";
        if (step == 1) {
          margin = "42%";
        } else if (step == 2) {
          margin = "44%";
        } else if (step == 3) {
          margin = "43%";
        }
        return margin;
      }

      function GetIcon() {
        return <i class="fa fa-check-circle" aria-hidden="true"></i>;
      }

      function getDigitIcon() {
        return <span class="badge">2</span>;
      }
      function AsignDigitIcon(stepno, Status) {
        const mystyle = {
          fontSize: 15,
          fontWeight: "700",
          strokeWidth: 0,
        };
        if (Status == false) {
          return (
            <svg width="100" height="100">
              <circle cx="30" cy="24" r="6" stroke-width="4" fill="#fff" />
              <text
                x="30%"
                y="26%"
                dominant-baseline="middle"
                text-anchor="middle"
                style={mystyle}
                class="polygonStyleUnselected"
              >
                {stepno}
              </text>
            </svg>
          );
        } else {
          return "";
        }
      }

      function getWidthSize(stepno) {
        if (stepno == 1) {
          return "240";
        } else if (stepno == 2) {
          return "300";
        } else if (stepno == 3) {
          return "200";
        }
      }

      function getSvgSize(stepno) {
        if (stepno == 1) {
          return "202.5,25 182.5,51 0,51 0,25 0,0 182.5,0";
          //return "240,25 220,51 37.5,51 37.5,25 37.5,0 220,0";
          //return "240,25 220,51 18.5,51 37.5,25 18.5,0 220,0";
        } else if (stepno == 2) {
          return "265.5,25 242.5,51 0,51 19,25 0,0 242.5,0";
          //return "220,25 200,51 18.5,51 37.5,25 18.5,0 200,0";
        } else if (stepno == 3) {
          return "185.5,25 162.5,51 0,51 19,25 0,0 162.5,0";
          //return "200,25 180,51 18.5,51 37.5,25 18.5,0 180,0";
        }
      }

      function GetIconSize(stepno) {
        if (stepno == 1) {
          return "20";
        } else if (stepno == 2) {
          return "34";
        } else if (stepno == 3) {
          return "34";
        }
      }

      function SetSVGCLass(Status) {
        let SelectionClass = "";
        if (Status == "Previous") {
          SelectionClass = "polygonStyleCompleted";
        } else if (Status == "Current") {
          SelectionClass = "polygonStyleStatndby";
        } else if (Status == "Next") {
          SelectionClass = "polygonStyleUnselected";
        }
        return SelectionClass;
      }

      function SetStyleForWizardText(Status) {
        if (Status == "Previous") {
          const TextStyle = {
            fill: "#fff",
          };
          return TextStyle;
        } else if (Status == "Current") {
          const TextStyle = {
            fill: "#fff",
          };
          return TextStyle;
        } else if (Status == "Next") {
          const TextStyle = {
            fill: "black",
          };
          return TextStyle;
        }
      }

      function DigitStyle(Status) {
        if (Status == "Previous") {
          const mystyle = {
            // fontSize:15,
            fontWeight: "700",
            strokeWidth: 0,
          };
          return mystyle;
        } else if (Status == "Current") {
          const mystyle = {
            // fontSize:15,
            fill: "#1E67B7",
            fontWeight: "700",
            strokeWidth: 0,
          };
          return mystyle;
        } else if (Status == "Next") {
          const mystyle = {
            // fontSize:15,
            // fill: "#black",
            fontWeight: "700",
            strokeWidth: 0,
          };
          return mystyle;
        }
      }

      function GetWizardStep(labelname, stepno, Status, onClickHandler) {
        let marginLeft = getmarginWidth(stepno);
        let SelectionClass = SetSVGCLass(Status); //(Status==true)?"polygonStyleSelected":"polygonStyleUnselected";

        let pointerClass = Status == "Previous" ? "clsLink" : "clsUnlink";
        let svgPoints = getSvgSize(stepno);
        let TotalWidth = getWidthSize(stepno);
        let RoundedIconWidth = GetIconSize(stepno);
        let RoundedIconWidthForText = RoundedIconWidth + "%";
        let className = "svgStyles " + "Div" + stepno + " " + pointerClass;
        const mystyle = DigitStyle(Status);

        // {
        //   // fontSize:15,
        //   fontWeight: "700",
        //   strokeWidth: 0,
        // };

        const TextStyle = SetStyleForWizardText(Status);

        if (Status == "Previous") {
          return (
            <svg
              name={stepno}
              height="75"
              width={TotalWidth}
              class={className}
              onClick={onClickHandler}
            >
              <polygon points={svgPoints} class={SelectionClass} />
              <svg width="100" height="100">
                <text
                  x={RoundedIconWidthForText}
                  y="26%"
                  dominant-baseline="middle"
                  text-anchor="middle"
                  class="iconStyle"
                >
                  {" "}
                  &#xf058;{" "}
                </text>
              </svg>

              <text
                x={marginLeft}
                y="34%"
                dominant-baseline="middle"
                text-anchor="middle"
                style={TextStyle}
                class="wizardTextStyle"
              >
                {" "}
                {labelname}
              </text>
            </svg>
          );
        } else {
          return (
            <svg
              name={stepno}
              height="75"
              width={TotalWidth}
              class={className}
              onClick={onClickHandler}
            >
              <polygon points={svgPoints} class={SelectionClass} />
              <svg width="100" height="100">
                <circle
                  cx={RoundedIconWidth}
                  cy="24"
                  r="8"
                  stroke-width="4"
                  style={TextStyle}
                />
                <text
                  x={RoundedIconWidthForText}
                  y="26%"
                  dominant-baseline="middle"
                  text-anchor="middle"
                  style={mystyle}
                  class="polygonStyleUnselected"
                >
                  {stepno}
                </text>
              </svg>
              <g>
                <text class="badge">CLICK ME</text>
              </g>
              <text
                x={marginLeft}
                y="34%"
                dominant-baseline="middle"
                text-anchor="middle"
                style={TextStyle}
                class="wizardTextStyle"
              >
                {" "}
                {labelname}
              </text>
            </svg>
          );
        }
      }

      function GetWizardText(step, onchangeHandler) {
        if (step == 1) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Sparkpost User Verification</span>
              </div>
              <div
                class="col-sm-4 Div2 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Inbox Tracker Configuration</span>
              </div>
              <div
                class="col-sm-4 Div3 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Review Setup</span>
              </div>
            </div>
          );
        } else if (step == 2) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 txtlabel txtCompleted clsLink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Sparkpost User Verification</span>
              </div>
              <div
                class="col-sm-4 Div2 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Inbox Tracker Configuration</span>
              </div>
              <div
                class="col-sm-4 Div3 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Review Setup</span>
              </div>
            </div>
          );
        } else if (step == 3) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 txtlabel txtCompleted clsLink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Sparkpost User Verification</span>
              </div>
              <div
                class="col-sm-4 Div2 txtlabel txtCompleted clsLink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Inbox Tracker Configuration</span>
              </div>
              <div
                class="col-sm-4 Div3 txtlabel txtIncompleted clsUnlink"
                onClick={onchangeHandler}
              >
                <span class="wrdtext">Review Setup</span>
              </div>
            </div>
          );
        }
      }

      function GetWizardBackground(step, onchangeHandler) {
        if (step == 1) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 Completed clsUnlink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div2 Incompleted clsUnlink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div3 Incompleted clsUnlink"
                onClick={onchangeHandler}
              ></div>
            </div>
          );
        } else if (step == 2) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 Completed clsLink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div2 Completed clsUnlink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div3 Incompleted clsUnlink"
                onClick={onchangeHandler}
              ></div>
            </div>
          );
        } else if (step == 3) {
          return (
            <div class="row marginZero">
              <div
                class="col-sm-4 Div1 Completed clsLink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div2 Completed clsLink"
                onClick={onchangeHandler}
              ></div>
              <div
                class="col-sm-4 Div3 Completed clsUnlink"
                onClick={onchangeHandler}
              ></div>
            </div>
          );
        }
      }

      function wizardNavigationNew(step, onchangeHandler) {
        //onclick={onClickHandler(stepno)}

        return (
          <div class="e1logorowpadding epaddingbottom12">
            {GetWizardText(step, onchangeHandler)}
            {GetWizardBackground(step, onchangeHandler)}
          </div>
        );
      }
      // if(step==1){
      //   return (
      //   <div class="wizard">
      //     {GetWizardStep("ORG. PREFERENCES", 1, "Current", onchangeHandler)}
      //     {GetWizardStep("INBOX TRACKER CONFIG", 2, "Next", onchangeHandler)}
      //     {GetWizardStep("SUMMARY", 3, "Next", onchangeHandler)}
      //   </div>
      //   );
      // } else if(step==2){
      //   return (
      //   <div class="wizard">

      //     {GetWizardStep("ORG. PREFERENCES", 1, "Previous", onchangeHandler)}
      //     {GetWizardStep("INBOX TRACKER CONFIG", 2, "Current", onchangeHandler)}
      //     {GetWizardStep("SUMMARY", 3, "Next", onchangeHandler)}
      //   </div>
      //   );
      // }else if(step==3){
      //   return (
      //   <div class="wizard">

      //     {GetWizardStep("ORG. PREFERENCES", 1, "Previous", onchangeHandler)}
      //     {GetWizardStep("INBOX TRACKER CONFIG", 2, "Previous", onchangeHandler)}
      //     {GetWizardStep("SUMMARY", 3, "Current", onchangeHandler)}
      //   </div>
      //   );
      // }

      //}

      function valicateFirstPage(name, groupname, PageStatus) {
        if (
          name != "" &&
          name != " " &&
          name != null &&
          groupname != "" &&
          groupname != " " &&
          groupname != null
        ) {
          return true;
        } else {
          return false;
        }
      }

      //checking the User ID and displaying result
      function ValidateAndNotify(name, groupname, PageStatus) {
        var DivClass = "";
        var IconClass = "";
        var Message = "";

        if (PageStatus == 1) {
          //Validation Success
          DivClass = "alert alert-success divAlert";
          IconClass = "fa fa-check-circle-o";
          Message = "Sparkpost Access Verified";
        } else if (PageStatus == 2) {
          //Validation Failed
          DivClass = "alert alert-danger divAlert";
          IconClass = "fa fa-times-circle-o";
          Message =
            "Something went wrong, Please contact your SparkPost Support Team";
        } else {
          return "";
        }

        return (
          <div class={DivClass}>
            <span class="divIcon">
              <i class={IconClass} aria-hidden="true"></i>
            </span>
            <span class="divDesc">
              <span>{Message}</span>
            </span>
          </div>
        );

        // ;
        // if(valicateFirstPage(name, groupname)){
        //   return (
        //     <div class="alert alert-success divAlert">
        //       <div class="divIcon dispInline">
        //         <i class="fa fa-check-circle-o" aria-hidden="true"></i>
        //       </div>
        //       <div class="divDesc dispInline">
        //         <span>Sparkpost Access Verified</span>
        //       </div>
        //     </div>
        //   )
        // } else{
        //   return (
        //     <div class="alert alert-danger divAlert">
        //       <div class="divIcon dispInline">
        //         <i class="fa fa-times-circle-o" aria-hidden="true"></i>
        //       </div>
        //       <div class="divDesc dispInline">
        //         <span>Something went wrong, Please contact your SparkPost Support Team</span>
        //       </div>
        //     </div>
        //   )
        // }
      }

      //Used to display the intelliseeds in modal
      function GetIntelliseedLists(intelliseedLists) {
        let concatinatedHtml = [];
        for (var i = 0; i < intelliseedLists.length; i++) {
          concatinatedHtml.push(
            <div class="row e1marginleft">
              <div class="col-md-7 ">
                <br />
              </div>
              <div class="col-md-5 ">
                <label class="reviewSetupLabel">{intelliseedLists[i]}</label>
                <br />
              </div>
            </div>
          );
        }
        return concatinatedHtml;
      }

      //what should be displayed in the modal we clicked in page 2
      function GetThresholdsMedalSection(
        inboxrange,
        changehandler,
        inboxrangelabel,
        modelname,
        headername,

        rulesMdlName,
        rulesMdlSimulatedEng,
        rulesMdlPercentList,
        rulesMdlCampaignMinVal,
        rulesMdlFilterByRegion,

        rulesMdlNorthAmericaCanada,
        rulesMdlNorthAmericaUS,
        AsiaPacific,

        myBtnClickHandler,
        formName,
        OpenModal,
        engageButtonChange,

        engagementrange,
        engagementrangelabel,
        SPFrange,
        SPFrangelabel,
        DKIMrange,
        DKIMrangelabel,

        modalContentHeading,
        domainName,
        engagedClassName,
        unEngagedClassName,
        intelliseedData,
        toggleIntelliseed,
        state,
        intelliseedLists
      ) {
        //var Numinboxrange=parseInt(inboxrange);
        var ForFifty = Math.round(parseInt(inboxrange));
        var engagementForFifty = Math.round(parseInt(engagementrange));
        var SPFForFifty = Math.round(parseInt(SPFrange));
        var DKIMForFifty = Math.round(parseInt(DKIMrange));
        var thisdata = this;

        if (modelname == "1") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modalbody">
                <div class="row">
                  <div class="col-md-1">
                    {" "}
                    <img
                      class="thresbtns2"
                      src="/images/inbox_idle.png"
                      style={{
                        width: "45px",
                        height: "40px",
                        "margin-left": "9px",
                        "margin-bottom": "16px",
                      }}
                    />
                  </div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      {" "}
                      {modalContentHeading} inbox Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">50%</label>
                  </div>
                  <div class="col-md-1">
                    <label
                      class="e1labelheaderPage4 float-left"
                      style={{ "margin-left": "15px" }}
                    >
                      100%
                    </label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={inboxrange}
                      name="inboxrange"
                      min="50"
                      max="100"
                      value={inboxrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": inboxrangelabel }}>
                      {ForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "1b") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1">
                    <img
                      class="thresbtns2"
                      src="/images/engagement_idle.png"
                      style={{
                        width: "45px",
                        height: "40px",
                        "margin-left": "9px",
                        "margin-bottom": "16px",
                      }}
                    />
                  </div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      {" "}
                      {modalContentHeading} Engagement Read Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">0%</label>
                  </div>
                  <div class="col-md-1">
                    <label
                      class="e1labelheaderPage4 float-left"
                      style={{ "margin-left": "15px" }}
                    >
                      100%
                    </label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={engagementrange}
                      name="engagementrange"
                      min="0"
                      max="100"
                      value={engagementrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": engagementrangelabel }}>
                      {engagementForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "1c") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1">
                    <img
                      class="thresbtns2"
                      src="/images/spf_idle.png"
                      style={{
                        width: "38px",
                        height: "41px",
                        "margin-left": "12px",
                        "margin-bottom": "16px",
                      }}
                    />
                  </div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      {" "}
                      {modalContentHeading} SPF Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">90%</label>
                  </div>
                  <div class="col-md-1">
                    <label
                      class="e1labelheaderPage4 float-left"
                      style={{ "margin-left": "15px" }}
                    >
                      100%
                    </label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={SPFrange}
                      name="SPFrange"
                      min="90"
                      max="100"
                      value={SPFrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": SPFrangelabel }}>
                      {SPFForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "1d") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroud"
                    src="/images/threshold.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div class="row">
                  <div class="col-md-1">
                    <img
                      class="thresbtns2"
                      src="/images/dkim_idle.png"
                      style={{
                        width: "45px",
                        height: "45px",
                        "margin-left": "9px",
                        "margin-bottom": "16px",
                      }}
                    />
                  </div>
                  <div class="col-md-11 float-left">
                    <label class="thresbtnsmall">
                      {" "}
                      {modalContentHeading} DKIM Rate %
                    </label>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-1"></div>
                  <div class="col-md-9 float-left">
                    <label class="threspercentage">90%</label>
                  </div>
                  <div class="col-md-1">
                    <label
                      class="e1labelheaderPage4 float-left"
                      style={{ "margin-left": "15px" }}
                    >
                      100%
                    </label>
                  </div>
                  <div class="col-md-1"></div>
                </div>

                <div class="row">
                  <div class="col-md-1"></div>

                  <div class="col-md-10">
                    <input
                      type="range"
                      data-toggle="tooltip"
                      data-placement="right"
                      title={DKIMrange}
                      name="DKIMrange"
                      min="90"
                      max="100"
                      value={DKIMrange}
                      onChange={changehandler}
                      class="slider"
                      id="myRange"
                    />
                    <div style={{ "margin-left": DKIMrangelabel }}>
                      {DKIMForFifty}%
                    </div>
                  </div>
                  <div class="col-md-1"></div>
                </div>
              </div>
            </div>
          );
        } else if (modelname == "2a") {
          //if (formName == "1") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroudLightGray"
                    src="/images/rules.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div>
                  <div class="row ">
                    <div class="col-md-1  ">
                      <img
                        class="thresbtnsforCM"
                        src="/images/campaign_min_idle.png"
                      />
                    </div>

                    <div class="col-md-10">
                      <div>
                        <label class="e1labelheaderPage5CM campaignStyleLabel">
                          {" "}
                          Please select a <strong>
                            Campaign Vol. Minimum
                          </strong>{" "}
                          for all "campaigns"
                          <sup>
                            <i
                              class="fa fa-info-circle"
                              style={{ "font-size": "12px" }}
                            ></i>
                          </sup>{" "}
                          in {domainName}
                        </label>
                      </div>

                      <div class="row">
                        <div class="col-md-10 campaignStyle">
                          Campaign Vol. Minimum
                        </div>
                      </div>
                      <div class="row">
                        <input
                          type="Number"
                          class="rulesTextBoxStyle"
                          name="rulesMdlCampaignMinVal"
                          value={rulesMdlCampaignMinVal}
                          onChange={changehandler}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
          //}

          /*
              This is Build new intelliseed function in Campaign minimum and Intelliseed modal
          */

          /*else {
             return (
               <div>
                 <div className="modal-header">
                   <label class="e1labelheaderPage1">
                     <img
                       class="thresbtns2 imageBackgroudLightGray"
                       src="/images/rules.png"
                     />
                     <span>{headername}</span>{" "}
                   </label>
                 </div>
                 <div class="modal-body">
                   <div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-11 float-left">
                         <label class="e1labelheaderPage5 float-left">
                           <img
                             class="thresbtns2"
                             src="/images/intelliseed_idle.png"
                           style={{
                             "width": "30px",
                             "height": "40px"
                         }}/>{" "}
                           Please set the parameters for {domainName}
                           's Intelli seed list(s)
                         </label>
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1 marginTop16px">
                           Name
                         </label>
                       </div>
                       <div class="col-md-4">
                         <input
                           type="text"
                           name="rulesMdlName"
                           placeholder="New Seed"
                           class="e1inputpg2 mdlControl"
                           value={rulesMdlName}
                           onChange={changehandler}
                         />
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1  marginTop16px">
                           Simulated Engagement
                         </label>
                       </div>
                       <div class="col-md-4">
                         <button class={engagedClassName} onClick={engageButtonChange(engagedClassName,"engageButton")}>Engaged</button>
                         <button class={unEngagedClassName} onClick={engageButtonChange(unEngagedClassName,"unEngageButton")}>Unengaged</button>
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1 marginTop16px">
                           Percent of List
                         </label>
                       </div>
                       <div class="col-md-4">
                         <input
                           type="text"
                           name="rulesMdlPercentList"
                           placeholder="50"
                           class="e1inputpg2  mdlControl"
                           style={{ width: "25%" }}
                           value={rulesMdlPercentList}
                           onChange={changehandler}
                         />
                         <b style={{ "font-size": "130%" }}>%</b>
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1 marginTop16px">
                           Filter By Region
                         </label>
                       </div>
                       <div class="col-md-4">
                         {GetCheckBoxFilterByRegion(
                           rulesMdlFilterByRegion,
                           changehandler
                         )}
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3"></div>
                       <div class="col-md-4 ">
                         <div class="mdlBorder">
                           <div class="row checkboxs">
                             <div class="col-md-10">
                               <label class="e1labelModalPage1">
                                 Available Regions
                               </label>
                               <hr
                                 style={{ "margin-top": "0rem", width: "15rem" }}
                               />
                             </div>
                           </div>
                           <div class="checkBoxList">
                             <div class="row">
                               <div class="col-md-10">
                                 <label class="e1labelModalPage2">
                                   North America-Canada
                                 </label>
                               </div>
                               <div class="col-md-2">
                                 {GetrulesMdlNorthAmericaCanada(
                                   rulesMdlNorthAmericaCanada,
                                   changehandler
                                 )}
                               </div>
                             </div>
                             <div class="row">
                               <div class="col-md-10">
                                 <label class="e1labelModalPage2">
                                   North America-US
                                 </label>
                               </div>
                               <div class="col-md-2">
                                 {GetrulesMdlNorthAmericaUS(
                                   rulesMdlNorthAmericaUS,
                                   changehandler
                                 )}{" "}
                               </div>
                             </div>
                             <div class="row">
                               <div class="col-md-10">
                                 <label class="e1labelModalPage2">
                                   Asia Pacific
                                 </label>
                               </div>
                               <div class="col-md-2">
                                 {GetAsiaPacific(AsiaPacific, changehandler)}
                               </div>
                             </div>
                           </div>
                         </div>
                         <div class="row">
                           <div class="col-md-12">
                             <button
                               class="btn btn-Black btn-xs float-right"
                               onClick={OpenModal}
                             >
                               Build New Intelliseed
                             </button>
                           </div>
                         </div>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>
             );
           }*/
        } else if (modelname == "2b") {
          //if (formName == "1") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroudLightGray"
                    src="/images/rules.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div col-md-1>
                  <div style={{ "margin-left": "30px" }}>
                    <div class="row">
                      <div class="col-md-11 float-left ">
                        <img
                          class="thresbtnsIS float-left"
                          src="/images/intelliseed_idle.png"
                        />
                        <label class="e1labelheaderPage5Rules float-left">
                          {" "}
                          Please select available seed lists to include in your
                          campaign rules
                        </label>
                      </div>
                    </div>
                    {GetRulesIndexModalSection(
                      changehandler,
                      intelliseedData,
                      toggleIntelliseed,
                      state,
                      intelliseedLists
                    )}
                    <div class="row paddingLeft15pxbtn">
                      <div class="col-md-11 float-left"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
          //}
          /*
              This is Build new intelliseed function in Campaign minimum and Intelliseed modal
          */
          /*else {
             return (
               <div>
                 <div className="modal-header">
                   <label class="e1labelheaderPage1">
                     <img
                       class="thresbtns2 imageBackgroudLightGray"
                       src="/images/rules.png"
                     />
                     <span>{headername}</span>{" "}
                   </label>
                 </div>
                 <div class="modal-body">
                   <div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-11 float-left">
                         <label class="e1labelheaderPage5 float-left">
                           <img
                             class="thresbtns2"
                             src="/images/intelliseed_idle.png"
                           />{" "}
                           Please set the parameters for {domainName}
                           's Intelli seed list(s)
                         </label>
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1 marginTop16px">
                           Name
                         </label>
                       </div>
                       <div class="col-md-4">
                         <input
                           type="text"
                           name="rulesMdlName"
                           placeholder="New Seed"
                           class="e1inputpg2 mdlControl"
                           value={rulesMdlName}
                           onChange={changehandler}
                         />
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1  marginTop16px">
                           Simulated Engagement
                         </label>
                       </div>
                       <div class="col-md-4">
                         <button class={engagedClassName} onClick={engageButtonChange(engagedClassName,"engageButton")}>Engaged</button>
                         <button class={unEngagedClassName} onClick={engageButtonChange(unEngagedClassName,"unEngageButton")}>Unengaged</button>
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1 marginTop16px">
                           Percent of List
                         </label>
                       </div>
                       <div class="col-md-4">
                         <input
                           type="text"
                           name="rulesMdlPercentList"
                           placeholder="50"
                           class="e1inputpg2  mdlControl"
                           style={{ width: "25%" }}
                           value={rulesMdlPercentList}
                           onChange={changehandler}
                         />
                         <b style={{ "font-size": "130%" }}>%</b>
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3">
                         <label class="floatLeft e1labelheaderPage1 marginTop16px">
                           Filter By Region
                         </label>
                       </div>
                       <div class="col-md-4">
                         {GetCheckBoxFilterByRegion(
                           rulesMdlFilterByRegion,
                           changehandler
                         )}
                       </div>
                     </div>
                     <div class="row  paddingLeft15px">
                       <div class="col-md-3"></div>
                       <div class="col-md-4 ">
                         <div class="mdlBorder">
                           <div class="row checkboxs">
                             <div class="col-md-10">
                               <label class="e1labelModalPage1">
                                 Available Regions
                               </label>
                               <hr
                                 style={{ "margin-top": "0rem", width: "15rem" }}
                               />
                             </div>
                           </div>
                           <div class="checkBoxList">
                             <div class="row">
                               <div class="col-md-10">
                                 <label class="e1labelModalPage2">
                                   North America-Canada
                                 </label>
                               </div>
                               <div class="col-md-2">
                                 {GetrulesMdlNorthAmericaCanada(
                                   rulesMdlNorthAmericaCanada,
                                   changehandler
                                 )}
                               </div>
                             </div>
                             <div class="row">
                               <div class="col-md-10">
                                 <label class="e1labelModalPage2">
                                   North America-US
                                 </label>
                               </div>
                               <div class="col-md-2">
                                 {GetrulesMdlNorthAmericaUS(
                                   rulesMdlNorthAmericaUS,
                                   changehandler
                                 )}{" "}
                               </div>
                             </div>
                             <div class="row">
                               <div class="col-md-10">
                                 <label class="e1labelModalPage2">
                                   Asia Pacific
                                 </label>
                               </div>
                               <div class="col-md-2">
                                 {GetAsiaPacific(AsiaPacific, changehandler)}
                               </div>
                             </div>
                           </div>
                         </div>
                         <div class="row">
                           <div class="col-md-12">
                             <button
                               class="btn btn-Black btn-xs float-right"
                               onClick={OpenModal}
                             >
                               Build New Intelliseed
                             </button>
                           </div>
                         </div>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>
             );
           } */
        } else if (modelname == "2c") {
          return (
            <div>
              <div className="modal-header">
                <label class="e1labelheaderPage1">
                  <img
                    class="thresbtns2 imageBackgroudLightGray"
                    src="/images/rules.png"
                  />
                  <span>{headername}</span>{" "}
                </label>
              </div>
              <div class="modal-body">
                <div>
                  <div class="row  paddingLeft15px">
                    <div class="col-md-11 float-left">
                      <label class="e1labelheaderPage5 float-left">
                        <img
                          class="thresbtns2"
                          src="/images/intelliseed_idle.png"
                        />{" "}
                        Please set the parameters for {domainName}
                        's Intelli seed list(s)
                      </label>
                    </div>
                  </div>
                  <div class="row  paddingLeft15px">
                    <div class="col-md-3">
                      <label class="floatLeft e1labelheaderPage1 marginTop16px">
                        Name
                      </label>
                    </div>
                    <div class="col-md-4">
                      <input
                        type="text"
                        name="rulesMdlName"
                        placeholder="New Seed"
                        class="e1inputpg2 mdlControl"
                        value={rulesMdlName}
                        onChange={changehandler}
                      />
                    </div>
                  </div>
                  <div class="row  paddingLeft15px">
                    <div class="col-md-3">
                      <label class="floatLeft e1labelheaderPage1  marginTop16px">
                        Simulated Engagement
                      </label>
                    </div>
                    <div class="col-md-4">
                      <button
                        class={engagedClassName}
                        onClick={engageButtonChange(
                          engagedClassName,
                          "engageButton"
                        )}
                      >
                        Engaged
                      </button>
                      <button
                        class={unEngagedClassName}
                        onClick={engageButtonChange(
                          unEngagedClassName,
                          "unEngageButton"
                        )}
                      >
                        Unengaged
                      </button>
                    </div>
                  </div>
                  <div class="row  paddingLeft15px">
                    <div class="col-md-3">
                      <label class="floatLeft e1labelheaderPage1 marginTop16px">
                        Percent of List
                      </label>
                    </div>
                    <div class="col-md-4">
                      <input
                        type="Number"
                        name="rulesMdlPercentList"
                        placeholder="50"
                        class="e1inputpg2  mdlControl"
                        style={{ width: "25%" }}
                        value={rulesMdlPercentList}
                        onChange={changehandler}
                      />
                      <b style={{ "font-size": "130%" }}>%</b>
                    </div>
                  </div>
                  <div class="row  paddingLeft15px">
                    <div class="col-md-3">
                      <label class="floatLeft e1labelheaderPage1 marginTop16px">
                        Filter By Region
                      </label>
                    </div>
                    <div class="col-md-4">
                      {GetCheckBoxFilterByRegion(
                        rulesMdlFilterByRegion,
                        changehandler
                      )}
                    </div>
                  </div>
                  <div class="row  paddingLeft15px">
                    <div class="col-md-3"></div>
                    <div class="col-md-4 ">
                      <div class="mdlBorder">
                        <div class="row checkboxs">
                          <div class="col-md-10">
                            <label class="e1labelModalPage1">
                              Available Regions
                            </label>
                            <hr
                              style={{ "margin-top": "0rem", width: "15rem" }}
                            />
                          </div>
                        </div>
                        <div class="checkBoxList">
                          <div class="row">
                            <div class="col-md-10">
                              <label class="e1labelModalPage2">
                                North America-Canada
                              </label>
                            </div>
                            <div class="col-md-2">
                              {GetrulesMdlNorthAmericaCanada(
                                rulesMdlNorthAmericaCanada,
                                changehandler
                              )}
                            </div>
                          </div>
                          <div class="row">
                            <div class="col-md-10">
                              <label class="e1labelModalPage2">
                                North America-US
                              </label>
                            </div>
                            <div class="col-md-2">
                              {GetrulesMdlNorthAmericaUS(
                                rulesMdlNorthAmericaUS,
                                changehandler
                              )}{" "}
                            </div>
                          </div>
                          <div class="row">
                            <div class="col-md-10">
                              <label class="e1labelModalPage2">
                                Asia Pacific
                              </label>
                            </div>
                            <div class="col-md-2">
                              {GetAsiaPacific(AsiaPacific, changehandler)}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-md-12">
                          <button
                            class="btn btn-Black btn-xs float-right"
                            onClick={OpenModal}
                          >
                            Build New Intelliseed
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        }
      }

      //Build new intelliseed's check box
      function GetAsiaPacific(AsiaPacific, changehandler) {
        if (AsiaPacific == true) {
          return (
            <input
              checked
              type="checkbox"
              name="AsiaPacific"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={AsiaPacific}
              onChange={changehandler}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="AsiaPacific"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={AsiaPacific}
              onChange={changehandler}
            />
          );
        }
      }

      //Build new intelliseed's check box
      function GetrulesMdlNorthAmericaUS(
        rulesMdlNorthAmericaUS,
        changehandler
      ) {
        if (rulesMdlNorthAmericaUS == true) {
          return (
            <input
              checked
              type="checkbox"
              name="rulesMdlNorthAmericaUS"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaUS}
              onChange={changehandler}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="rulesMdlNorthAmericaUS"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaUS}
              onChange={changehandler}
            />
          );
        }
      }

      //Build new intelliseed's check box
      function GetrulesMdlNorthAmericaCanada(
        rulesMdlNorthAmericaCanada,
        changehandler
      ) {
        if (rulesMdlNorthAmericaCanada == true) {
          return (
            <input
              checked
              type="checkbox"
              name="rulesMdlNorthAmericaCanada"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaCanada}
              onChange={changehandler}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="rulesMdlNorthAmericaCanada"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox checkboxInList"
              value={rulesMdlNorthAmericaCanada}
              onChange={changehandler}
            />
          );
        }
      }

      //this is the values with check box need to be displayed in the Build new intelliseed Modal
      function GetCheckBoxFilterByRegion(
        rulesMdlFilterByRegion,
        changehandler
      ) {
        if (rulesMdlFilterByRegion == true) {
          return (
            <input
              checked
              type="checkbox"
              name="rulesMdlFilterByRegion"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox"
              value={rulesMdlFilterByRegion}
              onChange={changehandler}
              style={{ width: "18px" }}
            />
          );
        } else {
          return (
            <input
              type="checkbox"
              name="rulesMdlFilterByRegion"
              placeholder=""
              class="e1inputpg2  mdlControl mdlCheckBox"
              value={rulesMdlFilterByRegion}
              onChange={changehandler}
              style={{ width: "18px" }}
            />
          );
        }
      }

      //Used to display the intelliseed with toggle on or off
      function GetRulesIndexModalSection(
        changehandler,
        intelliseedData,
        toggleIntelliseed,
        state,
        intelliseedLists
      ) {
        return (
          <div class="row paddingLeft15px">
            <div class="col-md-11">
              <table class="e1inputdd marginBotton10px tableStyle">
                <tr>
                  <td class="fontColor" style={{ padding: "8px" }}>
                    Available Seeds
                  </td>
                  <td></td>
                </tr>
                <hr class="tabHrline" />
                <div class="tablescroll">
                  {intelliseedData &&
                    intelliseedData.map((api) => {
                      return (
                        <tr>
                          <td class="fontColor intelliseedStyle">{api}</td>
                          <td>
                            <label class="switch">
                              <input
                                class="toggleIntelliseed"
                                type="checkbox"
                                name={api}
                                checked={
                                  ([state][0][api + "toggleStatus"] = [
                                    state,
                                  ][0][api + "toggleStatus"]
                                    ? [state][0][api + "toggleStatus"]
                                    : false)
                                }
                                value={
                                  ([state][0][api + "toggleStatus"] = [
                                    state,
                                  ][0][api + "toggleStatus"]
                                    ? [state][0][api + "toggleStatus"]
                                    : false)
                                }
                                onChange={changehandler}
                              />
                              <span class="sliderRound sliderISL">{}</span>
                            </label>
                          </td>
                        </tr>
                      );
                    })}
                </div>
              </table>
            </div>
          </div>
        );
      }

      //Used to generate the access token
      function accessTokenGeneration(thisdata) {
        axios({
          method: "POST",
          url: "/appdemoauthtoken",
          data: {
            authorization_code: thisdata.state.authorization_code,
            tssd: thisdata.state.tssd,
          },
        })
          .then(function (response) {
            console.log(
              "accesstokengeneration:" +
                JSON.stringify(response.data.refreshToken)
            );
            thisdata.setState({ refreshtoken: response.data.refreshToken });
            AppUserInfo(thisdata, response.data.refreshToken);
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //Used to fetch the user information
      function AppUserInfo(thisdata, refreshToken) {
        axios({
          method: "POST",
          url: "/appuserinfo",
          data: { refreshToken: refreshToken, tssd: thisdata.state.tssd },
        })
          .then(function (response) {
            console.log("appuserinfo:" + JSON.stringify(response));

            //thisdata.setState({ namex: response.data });
            thisdata.setState({ refreshtoken: response.data.refreshToken });
            thisdata.setState({ member_id: response.data.member_id });
            thisdata.setState({
              restInstance: response.data.rest_instance_url,
            });
            thisdata.setState({
              soapInstance: response.data.soap_instance_url,
            });

            dataFolderCheck(
              thisdata,
              response.data.refreshToken,
              response.data.member_id,
              response.data.rest_instance_url,
              response.data.soap_instance_url
            );
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //Used to check Domain configuration data extension check
      function dataFolderCheck(
        thisdata,
        refreshToken,
        memberid,
        restInstance,
        soapInstance
      ) {
        axios({
          method: "POST",
          url: "/datafoldercheck",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            restInstance: restInstance,
            soapInstance: soapInstance,
          },
        })
          .then(function (response) {
            console.log("datafolder:" + JSON.stringify(response.data));
            if (response.data.statusText) {
              console.log("memberid:" + thisdata.member_id);
              console.log("refreshToken:" + thisdata.refreshtoken);
              console.log("restInstance:" + thisdata.restInstance);
              console.log("soapInstance:" + thisdata.soapInstance);

              thisdata.setState({ refreshtoken: response.data.refreshToken });
              thisdata.setState({ FolderID: response.data.FolderID });
              domainConfigurationDECheck(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.FolderID
              );
            } else {
              retrievingDataExtensionFolderID(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id
              );
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //retrieving sparkpost integration folder ID
      function retrievingDataExtensionFolderID(
        thisdata,
        refreshToken,
        soapInstance,
        memberid
      ) {
        axios({
          method: "POST",
          url: "/retrievingdataextensionfolderid",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
          },
        })
          .then(function (response) {
            if (response.data.statusText) {
              console.log(
                "retrievingdataextensionfolderid:" +
                  JSON.stringify(response.data)
              );
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              createSparkpostIntegrationFolder(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.ParentFolderID
              );
            } else {
              console.log("Error getting Data extension's folder ID");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      // creating Sparkpost Integration Data folder
      function createSparkpostIntegrationFolder(
        thisdata,
        refreshToken,
        soapInstance,
        memberid,
        ParentFolderID
      ) {
        axios({
          method: "POST",
          url: "/createsparkpostintegrationfolder",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
            ParentFolderID: ParentFolderID,
          },
        })
          .then(function (response) {
            console.log(
              "createSparkpostIntegrationFolder:" +
                JSON.stringify(response.data)
            );
            if (response.data.statusText) {
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              thisdata.setState({ FolderID: response.data.FolderID });
              domainConfigurationDECheck(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.FolderID
              );
            } else {
              console.log("Error creating data extension folder");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //checking Domain configuration DE is available or not
      function domainConfigurationDECheck(
        thisdata,
        refreshToken,
        soapInstance,
        memberid,
        FolderID
      ) {
        axios({
          method: "POST",
          url: "/domainconfigurationdecheck",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
            FolderID: FolderID,
          },
        })
          .then(function (response) {
            console.log(
              "domainConfigurationDECheck:" + JSON.stringify(response)
            );
            if (response.data) {
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              thisdata.setState({
                DEexternalKeyDomainConfiguration:
                  response.data.DEexternalKeyDomainConfiguration,
              });
              intelliseedListsDECheck(
                thisdata,
                response.data.refreshToken,
                soapInstance,
                memberid,
                FolderID
              );
            } else {
              console.log("Error creating data extension folder");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //checking Intelliseeds Lists DE is available or not
      function intelliseedListsDECheck(
        thisdata,
        refreshToken,
        soapInstance,
        memberid,
        FolderID
      ) {
        axios({
          method: "POST",
          url: "/intelliseedlistsdecheck",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
            FolderID: FolderID,
          },
        })
          .then(function (response) {
            if (response.data) {
              console.log(
                "intelliseedlistsdecheck:" + JSON.stringify(response)
              );

              thisdata.setState({ refreshtoken: response.data.refreshToken });
              thisdata.setState({
                DEexternalKeyIntelliseedLists:
                  response.data.DEexternalKeyIntelliseedLists,
              });
              checkSalesforceJobStats(
                thisdata,
                response.data.refreshToken,
                soapInstance,
                memberid
              );
            } else {
              console.log("Error creating the Intelliseed Data Extension");
              checkSalesforceJobStats(
                thisdata,
                response.data.refreshToken,
                soapInstance,
                memberid
              );
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //used to calculate the rows of Domain configuration data extension
      function rowCount(
        thisdata,
        refreshToken,
        soapInstance,
        memberid,
        domain
      ) {
        //let thisdata = this;
        console.log("refresh token row count:" + refreshToken);
        console.log("soapInstance row count:" + soapInstance);
        console.log("memberID:" + memberid);
        console.log("Domain :" + domain);
        console.log(
          "DEexternalKeyDomainConfiguration:" +
            thisdata.DEexternalKeyDomainConfiguration
        );
        const params = {
          refreshToken: refreshToken,
          tssd: thisdata.state.tssd,
          memberid: memberid,
          soapInstance: soapInstance,
          DEexternalKeyDomainConfiguration:
            thisdata.state.DEexternalKeyDomainConfiguration,
          domainvalue: domain,
        };

        axios({
          method: "GET",
          url: "/rowcount",
          params: params,
        })
          .then(function (response) {
            console.log("response for row count:" + JSON.stringify(response));
            if (response.data) {
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              if (response.data.rawData != undefined && response.data.rawData) {
                console.log(
                  "IF rawdata " + JSON.stringify(response.data.rawData)
                );
                thisdata.setState(
                  {
                    rowCount: 1,
                  },
                  () => {
                    console.log(thisdata.state.rowCount);
                  }
                );
              } /*else {
                console.log("else " + JSON.stringify(response.data.rawData));
                thisdata.setState({ rowCount: 0 });
              }*/

              /*checkSalesforceJobStats(
                thisdata,
                response.data.refreshToken,
                soapInstance,
                memberid
              );*/
            } /* else {
              checkSalesforceJobStats(
                thisdata,
                response.data.refreshToken,
                soapInstance,
                memberid
              );
            }*/
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //checking Salesforce job stats data extension is available or not
      function checkSalesforceJobStats(
        thisdata,
        refreshToken,
        soapInstance,
        memberid
      ) {
        //let thisdata = this;
        console.log("folderid:" + thisdata.FolderID);
        axios({
          method: "POST",
          url: "/checksalesforcejobstats",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
            FolderID: thisdata.state.FolderID,
          },
        })
          .then(function (response) {
            console.log("checksalesforcejobstats:" + JSON.stringify(response));
            if (response.data) {
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              checkSalesforceBounceStats(
                thisdata,
                response.data.jobStatsId,
                response.data.refreshToken,
                soapInstance,
                memberid
              );
            } else {
              console.log(
                "Error fetching the Salesforce Job Stats data extension details"
              );
              checkSalesforceBounceStats(
                thisdata,
                '',
                response.data.refreshToken,
                soapInstance,
                memberid
              );
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function checkSalesforceBounceStats(
        thisdata, jobId,
        refreshToken,
        soapInstance,
        memberid
      ) {
        //let thisdata = this;
        axios({
          method: "POST",
          url: "/checksalesforcebouncestats",
          data: {
            refreshToken: refreshToken,
            jobStatId: jobId,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
            FolderID: thisdata.state.FolderID,
          },
        })
          .then(function (response) {
            if (response.data) {
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              console.log(
                "checkSalesforceBounceStats ::: " +
                  JSON.stringify(response.data)
              );
            } else {
              console.log(
                "Error fetching the Salesforce Bounce Stats data extension details"
              );
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //Inserting row into Domain configuration
      function loadDataForDomainConfiguration(
        domainConfigurationData,
        thisdata
      ) {
        console.log("memberid:" + thisdata.state.member_id);
        console.log("refreshToken:" + thisdata.state.refreshtoken);
        console.log("restInstance:" + thisdata.state.restInstance);
        console.log("soapInstance:" + thisdata.state.soapInstance);
        console.log(
          "De external KEY " + thisdata.state.DEexternalKeyDomainConfiguration
        );
        const userInfobody = {
          tssd: thisdata.state.tssd,
          memberid: thisdata.state.member_id,
          restInstance: thisdata.state.restInstance,
          soapInstance: thisdata.state.soapInstance,
          DEexternalKeyDomainConfiguration:
            thisdata.state.DEexternalKeyDomainConfiguration,
        };
        const data = {
          domainConfigurationData: domainConfigurationData,
          userInfobody: userInfobody,
          refreshToken: thisdata.state.refreshtoken,
        };
        axios({
          method: "POST",
          url: "/insertrowfordc",
          data: data,
          headers: { "Content-Type": "application/json" },
        })
          .then(function (response) {
            console.log(
              "loadDataForDomainConfiguration:" + JSON.stringify(response.data)
            );
            thisdata.setState({ refreshtoken: response.data.refreshToken });
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //Inserting row into Intelliseeds Lists
      function loadDataForIntelliseedLists(intelliseedListsData, thisdata) {
        const userInfo = {
          refreshToken: thisdata.state.refreshtoken,
          tssd: thisdata.state.tssd,
          memberid: thisdata.state.member_id,
          restInstance: thisdata.state.restInstance,
          soapInstance: thisdata.state.soapInstance,
          DEexternalKeyIntelliseedLists:
            thisdata.state.DEexternalKeyIntelliseedLists,
        };
        const data = {
          intelliseedListsData: intelliseedListsData,
          userInfo: userInfo,
        };
        axios({
          method: "POST",
          url: "/insertrowforisl",
          data: data,
          headers: { "Content-Type": "application/json" },
        })
          .then(function (response) {
            console.log(
              "loadDataForIntelliseedLists:" + JSON.stringify(response.data)
            );
            thisdata.setState({ refreshtoken: response.data.refreshToken });
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //Used to fetch the data for data extension for individual intelliseeds
      function filterIdDataFromSparkpost(
        responseData,
        intelliseedName,
        accountID,
        thisdata,
        thisvar
      ) {
        console.log("response data filter ::: " + JSON.stringify(responseData));
        console.log("intelliseed Name filter ::: " + intelliseedName);
        console.log("account Id filter ::: " + accountID);
        console.log("thisdata " + thisdata);
        console.log("this var ::: " + thisvar);
        for (var i = 0; i < responseData.length; i++) {
          if (
            [thisdata][0][
              responseData[i].name +
                "-" +
                responseData[i].filterSetId +
                "toggleStatus"
            ] == true
          ) {
            let Statelabel =
              responseData[i].name + "-" + responseData[i].filterSetId;
            /*var Statelabel =
            responseData[i].name + "-" + responseData[i].filterSetId;*/
            var label = responseData[i].filterSetId;
            axios({
              method: "POST",
              url: "/filteriddatasparkpost",
              data: { filterId: label, accountId: accountID },
            })
              .then(function (response) {
                thisvar.setState({ Statelabel: response.data });
                filterIdDataExtensionCreation(
                  intelliseedName,
                  response.data,
                  i,
                  Statelabel,
                  thisvar.state.Statelabel,
                  thisvar
                );
              })
              .catch(function (error) {
                console.log(error);
              });
          }
        }
      }

      //creating the data extension for the individual intelliseeds
      function filterIdDataExtensionCreation(
        intelliseedName,
        responsedata,
        ivar,
        intelliseedExtensionName,
        ExtensionData,
        thisvar
      ) {
        //var label = responseData[0].name + "-" + responseData[0].filterSetId;
        console.log("folder Id filter id ::: " + thisvar.state.FolderID);
        const userInfo = {
          refreshToken: thisvar.state.refreshtoken,
          tssd: thisvar.state.tssd,
          memberid: thisvar.state.member_id,
          restInstance: thisvar.state.restInstance,
          soapInstance: thisvar.state.soapInstance,
          FolderID: thisvar.state.FolderID,
        };
        for (var i = 0; i < intelliseedName.length; i++) {
          axios({
            method: "POST",
            url: "/filteriddata",
            data: {
              intelliseed_Name: intelliseedName[i],
              filterIDsetData: responsedata,
              userInfo: userInfo,
            },
          })
            .then(function (response) {
              console.log(
                "filterIdDataExtensionCreation:" + JSON.stringify(response.data)
              );
              thisvar.setState({ refreshtoken: response.data.refreshToken });
              FilterSetDataExtensionUpdation(
                intelliseedName,
                responsedata,
                intelliseedExtensionName,
                ExtensionData,
                response.data.refreshToken,
                thisvar
              );
            })
            .catch(function (error) {
              console.log(error);
            });
        }
      }

      //inserting values to that individual data extension for intelliseed
      function FilterSetDataExtensionUpdation(
        intelliseedName,
        responsedata,
        intelliseedExtensionName,
        ExtensionData,
        refreshtoken,
        thisvar
      ) {
        var intelliseed_ExtensionNameParam = intelliseedExtensionName;
        axios({
          method: "POST",
          url: "/filteriddataextensionupdation",
          data: {
            intelliseed_Name: intelliseedName,
            DataExtensionName: intelliseedExtensionName,
            [intelliseed_ExtensionNameParam]: ExtensionData,
            filterIDsetData: responsedata,
            refreshToken: refreshtoken,
            tssd: thisvar.state.tssd,
            memberid: thisvar.state.member_id,
            restInstance: thisvar.state.restInstance,
            soapInstance: thisvar.state.soapInstance,
          },
        })
          .then(function (response) {
            console.log(
              "filteriddataextensionupdation:" + JSON.stringify(response.data)
            );
            thisvar.setState({ refreshtoken: response.data.refreshToken });
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      //Used to display AND OR
      function ApplyToggleStyle(
        blnstatus,
        emtname,
        changehandler,
        classname,
        domainValue,
        firsttoggleVisibleValue,
        secondToggleVisibleValue,
        FirstBoxRangeChange,
        SecondBoxRangeChange
      ) {
        var className = "";

        if (domainValue == "") {
          if (blnstatus == true) {
            return (
              <div
                class="divHead disableToggle"
                value={blnstatus}
                name={emtname}
              >
                <div class="divOne">
                  <span class={classname} value={blnstatus}>
                    AND
                  </span>
                </div>
                <div class="divTwo">
                  <span class={classname} value={blnstatus}>
                    OR
                  </span>
                </div>
              </div>
            );
          } else if (blnstatus == false) {
            return (
              <div class="divHeadInactive disableToggle" name={emtname}>
                <div class="divOneInactive">
                  <span class={classname} value={blnstatus}>
                    AND
                  </span>
                </div>
                <div class="divTwoInactive">
                  <span class={classname} value={blnstatus}>
                    OR
                  </span>
                </div>
              </div>
            );
          }
        } else {
          let togglechange =
            firsttoggleVisibleValue && secondToggleVisibleValue == true
              ? true
              : false;
          let RangeChanges =
            FirstBoxRangeChange && SecondBoxRangeChange == true ? true : false;
          if (
            (togglechange == true && blnstatus == true) ||
            (RangeChanges == true && blnstatus == true) ||
            (firsttoggleVisibleValue == true &&
              SecondBoxRangeChange == true &&
              blnstatus == true)
          ) {
            return (
              <div
                class="divHead"
                value={blnstatus}
                name={emtname}
                onClick={changehandler}
              >
                <div class="divOne">
                  <span
                    class={classname}
                    onClick={changehandler}
                    value={blnstatus}
                  >
                    AND
                  </span>
                </div>
                <div class="divTwo">
                  <span
                    class={classname}
                    onClick={changehandler}
                    value={blnstatus}
                  >
                    OR
                  </span>
                </div>
              </div>
            );
          } else if (
            (togglechange == true && blnstatus == false) ||
            (RangeChanges == true && blnstatus == false) ||
            (firsttoggleVisibleValue == true &&
              SecondBoxRangeChange == true &&
              blnstatus == false)
          ) {
            return (
              <div
                class="divHeadInactive"
                name={emtname}
                onClick={changehandler}
              >
                <div class="divOneInactive">
                  <span
                    class={classname}
                    onClick={changehandler}
                    value={blnstatus}
                  >
                    AND
                  </span>
                </div>
                <div class="divTwoInactive">
                  <span
                    class={classname}
                    onClick={changehandler}
                    value={blnstatus}
                  >
                    OR
                  </span>
                </div>
              </div>
            );
          } else {
            /*  if(domainValue == 'email.gap.com' && rangechange == true && blnstatus == true  || domainValue == 'email.gap.com' && SecondBoxRangeChange == true && blnstatus == true || domainValue == 'boxbe.com' && engagement_Range == true && blnstatus == true || domainValue == 'boxbe.com' && FirstBoxRangeChange == true && blnstatus == true || domainValue == 'email.gapfactory.com' && rangechange == true && blnstatus == true || domainValue == 'email.gapfactory.com' && engagement_Range == true && blnstatus == true){
             return (
               <div class="divHead" value={blnstatus} name={emtname} onClick={changehandler}>
                 <div class="divOne">
                   <span class={classname} onClick={changehandler} value={blnstatus}>
                     AND
                   </span>
                 </div>
                 <div class="divTwo">
                   <span class={classname} onClick={changehandler} value={blnstatus}>
                     OR
                   </span>
                 </div>
               </div>
             );
           }
          else if(domainValue == 'email.gap.com' && rangechange == true && blnstatus == false  || domainValue == 'email.gap.com' && SecondBoxRangeChange == true && blnstatus == false || domainValue == 'boxbe.com' && engagement_Range == true && blnstatus == false || domainValue == 'boxbe.com' && FirstBoxRangeChange == true && blnstatus == false || domainValue == 'email.gapfactory.com' && rangechange == true && blnstatus == false || domainValue == 'email.gapfactory.com' && engagement_Range == true && blnstatus == false){
             return (
               <div
                 class="divHeadInactive"
                 name={emtname}
                 onClick={changehandler}
               >
                 <div class="divOneInactive">
                   <span
                     class={classname}
                     onClick={changehandler}
                     value={blnstatus}
                   >
                     AND
                   </span>
                 </div>
                 <div class="divTwoInactive">
                   <span
                     class={classname}
                     onClick={changehandler}
                     value={blnstatus}
                   >
                     OR
                   </span>
                 </div>
               </div>
             );
           } */
            /* else if (blnstatus == true && FirstBoxRangeChange== true) {
             return (
               <div class="divHead" value={blnstatus} name={emtname} onClick={changehandler}>
                 <div class="divOne">
                   <span class={classname} onClick={changehandler} value={blnstatus}>
                     AND
                   </span>
                 </div>
                 <div class="divTwo">
                   <span class={classname} onClick={changehandler} value={blnstatus}>
                     OR
                   </span>
                 </div>
               </div>
             );
           } else if (blnstatus == false && FirstBoxRangeChange== true) {
             return (
               <div
                 class="divHeadInactive"
                 name={emtname}
                 onClick={changehandler}
               >
                 <div class="divOneInactive">
                   <span
                     class={classname}
                     onClick={changehandler}
                     value={blnstatus}
                   >
                     AND
                   </span>
                 </div>
                 <div class="divTwoInactive">
                   <span
                     class={classname}
                     onClick={changehandler}
                     value={blnstatus}
                   >
                     OR
                   </span>
                 </div>
               </div>
             );
           } */
            return (
              <div class="divHeadInactive disableToggle" name={emtname}>
                <div class="divOneInactive">
                  <span class={classname} value={blnstatus}>
                    AND
                  </span>
                </div>
                <div class="divTwoInactive">
                  <span class={classname} value={blnstatus}>
                    OR
                  </span>
                </div>
              </div>
            );
          }
        }
      }

      class SparkpostPage1 extends React.Component {
        constructor(props) {
          super(props);
          //default value for MC Vars
          this.accountId = 0;
          this.refreshtoken = "";
          this.member_id = "";
          this.restInstance = "";
          this.soapInstance = "";
          this.DEexternalKeyDomainConfiguration = "";
          this.DEexternalKeyIntelliseedLists = "";
          this.FolderID = "";
          this.rowCount = 0;
          //default domain value
          this.authorization_code = "";
          this.tssd = "";
          this.pagenumber = 1;
          this.URLnamex = "";
          this.URLPage1ValidationStatus = 0;
          this.DomainName = "";
          this.domaindata = null;
          this.intelliseed = null;
          this.URLintelliseedData = null;
          this.defaultSeedsData = null;
          //default value for inbox
          this.inboxranges = 50;
          this.inboxrangeslabel = 1;
          this.inboxrangeChanges = false;
          this.readrangeChanges = false;
          this.SPFrangeChanges = false;
          //this.DKIMrangeChanges = false;
          this.DKIMRangeChanges = false;
          this.CampaignChange = false;
          this.ClassNameIndexBoxs = false;
          this.imageIndexs = "/images/inbox_idle.png";
          this.classNameIndexs = "outderDiv";
          //default value for engagement
          this.URLengagementrange = 0;
          this.URLengagementrangelabel = 1;
          this.URLInboxToggleVisible = false;
          this.URLengagementToggleVisible = false;
          this.URLclassNameEngagementBox = false;
          this.URLimageEngagementReadRate = "/images/engagement_idle.png";
          this.URLclassNameEngagementReadRate = "outderDiv";
          //default value for SPF
          this.URLSPFrange = 90;
          this.URLSPFrangelabel = 1;
          this.URLSPFToggleVisible = false;
          this.URLclassNameSpfBox = false;
          this.URLImageSpf = "/images/spf_idle.png";
          this.URLclassNameSpf = "outderDiv";
          //default value for DKIM
          this.URLDKIMrange = 90;
          this.URLDKIMrangelabel = 1;
          this.URLDKIMToggleVisible = false;
          this.URLclassNameDkimBox = false;
          this.URLImageDKIM = "/images/dkim_idle.png";
          this.URLclassNameDKIM = "outderDiv";
          //default value for campaign
          this.URLrulesMdlCampaignMinVal = "";
          this.URLCampaignToggleVisible = false;
          this.URLclassNameCampaignBox = false;
          this.URLimageMinValume = "/images/campaign_min_idle.png";
          this.URLclassNameMinValume = "outderDiv";
          //default value for intelliseed
          this.URLintelliseedLists = [];
          this.URLIntelliseedToggleVisible = false;
          this.URLclassNameIntelliseedBox = false;
          this.URLimageCampaignMin = "/images/intelliseed_idle.png";
          this.URLclassNameCampaignMin = "outderDiv";
          this.intelliseedSelected = [];

          const url = new URL(window.location.href);
          const pageNumber = url.searchParams.get("pagenumber");
          const DomainName = url.searchParams.get("domainname");
          const InboxValue = url.searchParams.get("inboxvalue");
          const EngagementValue = url.searchParams.get("engagementValue");
          const SPFValue = url.searchParams.get("spfvalue");
          const DKIMValue = url.searchParams.get("dkimvalue");
          const CampaignValue = url.searchParams.get("campaignvalue");
          const IntelliseedValue = url.searchParams.get("intelliseedvalue");
          const DomainData = url.searchParams.get("domaindata");
          const inboxRangeChanges = url.searchParams.get("inboxRangeChanges");
          const readRangeChanges = url.searchParams.get("readRangeChanges");
          const SPFRangeChanges = url.searchParams.get("SPFRangeChanges");
          const DKIMRangeChanges = url.searchParams.get("DKIMRangeChanges");
          const campaignRangeChanges = url.searchParams.get(
            "campaignRangeChanges"
          );
          const authorization_code = url.searchParams.get("code");
          const intelliseedData = url.searchParams.get("intelliseeddata");
          const userName = url.searchParams.get("username");
          const regex = /\d/;
          this.refreshtoken = url.searchParams.get("rt");
          this.member_id = url.searchParams.get("memberid");
          this.restInstance = url.searchParams.get("restInstance");
          this.soapInstance = url.searchParams.get("soapInstance");
          this.DEexternalKeyDomainConfiguration = url.searchParams.get(
            "DEexternalKeyDomainConfiguration"
          );
          this.DEexternalKeyIntelliseedLists = url.searchParams.get(
            "DEexternalKeyIntelliseedLists"
          );
          this.accountId = url.searchParams.get("accountId");
          this.rowCount =
            url.searchParams.get("rowCount") == null
              ? 0
              : url.searchParams.get("rowCount");
          console.log("this row count " + this.rowCount);
          this.FolderID = url.searchParams.get("FolderID");
          if (authorization_code != undefined && authorization_code != "") {
            this.authorization_code = authorization_code;
          }
          if (pageNumber != undefined && pageNumber != "") {
            this.pagenumber = pageNumber;
            if (userName != undefined && userName != "") {
              console.log("Sparkpost user Name ::: " + userName);
              this.URLnamex = userName;
              this.URLPage1ValidationStatus = 1;
            }
            if (DomainName != undefined && DomainName != "") {
              this.DomainName = DomainName;
            }
            if (DomainData != undefined) {
              this.domaindata = JSON.parse(DomainData);
            }

            if (intelliseedData != undefined && intelliseedData != '') {
              let thisdata = this;
              var intelliseedFetched = {};
              var intelliseedName = [];
              this.intelliseed = JSON.parse(intelliseedData);
              for (var i = 0; i < this.intelliseed.length; i++) {
                intelliseedName.push(
                  this.intelliseed[i].name +
                    "-" +
                    this.intelliseed[i].filterSetId
                );
                intelliseedFetched[
                  this.intelliseed[i].name +
                    "-" +
                    this.intelliseed[i].filterSetId
                ] = false;
              }
              this.URLintelliseedData = intelliseedName;
              this.defaultSeedsData = intelliseedFetched;
            }
            if (InboxValue != "" && regex.test(InboxValue)) {
              this.inboxranges = InboxValue != "" ? InboxValue : 50;
              this.inboxrangeslabel = InboxValue != "" ? InboxValue : 50;
              this.DKIMRangeChanges = false;
              this.ClassNameIndexBoxs = true;
              this.imageIndexs = "/images/inbox_light.png";
              this.classNameIndexs = "outderDiv1";
              this.inboxrangeChanges = inboxRangeChanges;
            }
            if (EngagementValue != "" && regex.test(EngagementValue)) {
              this.URLengagementrange =
                EngagementValue != "" ? EngagementValue : 0;
              this.URLengagementrangelabel =
                EngagementValue != "" ? EngagementValue : 0;
              this.URLInboxToggleVisible = true;
              this.URLengagementToggleVisible = true;
              this.URLclassNameEngagementBox = true;
              this.URLimageEngagementReadRate = "/images/engagement_light.png";
              this.URLclassNameEngagementReadRate = "outderDiv1";
              this.readrangeChanges = readRangeChanges;
            }
            if (SPFValue != "" && regex.test(SPFValue)) {
              this.URLSPFrange = SPFValue != "" ? SPFValue : 90;
              this.URLSPFrangelabel = SPFValue != "" ? SPFValue : 90;
              this.URLSPFToggleVisible = true;
              this.URLclassNameSpfBox = true;
              this.URLImageSpf = "/images/spf_light.png";
              this.URLclassNameSpf = "outderDiv1";
              this.SPFrangeChanges = SPFRangeChanges;
            }

            if (DKIMValue != "" && regex.test(DKIMValue)) {
              this.URLDKIMrange = DKIMValue != "" ? DKIMValue : 90;
              this.URLDKIMrangelabel = DKIMValue;
              this.URLDKIMToggleVisible = true;
              this.URLclassNameDkimBox = true;
              this.URLImageDKIM = "/images/dkim_light.png";
              this.URLclassNameDKIM = "outderDiv1";
              this.DKIMRangeChanges = DKIMRangeChanges;
            }
            if (CampaignValue != undefined && CampaignValue != "") {
              this.URLrulesMdlCampaignMinVal = CampaignValue;
              this.URLCampaignToggleVisible = true;
              this.URLclassNameCampaignBox = true;
              this.URLimageMinValume = "/images/campaign_min_light.png";
              this.URLclassNameMinValume = "campaignoutderDiv";
              this.CampaignChange = campaignRangeChanges;
            }
            if (
              IntelliseedValue != undefined &&
              IntelliseedValue != "" &&
              IntelliseedValue.length != 0
            ) {
              this.URLIntelliseedToggleVisible = true;
              this.URLimageCampaignMin = "/images/intelliseed_light.png";
              this.URLclassNameCampaignMin = "campaignoutderDiv";
              this.URLclassNameIntelliseedBox = true;
              var toggledIntelliseed = [];
              var IntelliseedSplited = IntelliseedValue.split(",");
              for (var i = 0; i < IntelliseedSplited.length; i++) {
                IntelliseedSplited[i].replace(/['"]/g, "");
                toggledIntelliseed.push(IntelliseedSplited[i]);
              }

              for (var i = 0; i < toggledIntelliseed.length; i++) {
                this.setState({
                  [toggledIntelliseed[i] + "toggleStatus"]: true,
                });
              }
              this.intelliseedSelected = toggledIntelliseed;
            }
          } else {
          }

          this.state = {
            authorization_code: this.authorization_code,
            rowCount: this.rowCount,
            groupname: "SalesforceIntegration",
            namex: this.URLnamex,
            useridx: "",
            Page1ValidationStatus: this.URLPage1ValidationStatus,
            userId: 0,
            tssd: tssd,
            btn1data: "",
            btn2data: "",
            btn3data: "",
            btn4data: "",
            btn5data: "",
            btn6data: "",
            page: this.pagenumber,
            apidata: null,
            loadPage2: true,
            data: this.domaindata,
            intelliseedData: this.URLintelliseedData,
            modalVisible: false,
            modalClicked: false,
            modalVisible2: false,
            inboxToggleVisible: this.URLInboxToggleVisible,
            engagementToggleVisible: this.URLengagementToggleVisible,
            SPFToggleVisible: this.URLSPFToggleVisible,
            DKIMToggleVisible: this.URLDKIMToggleVisible,
            CampaignToggleVisible: this.URLCampaignToggleVisible,
            IntelliseedToggleVisible: this.URLIntelliseedToggleVisible,
            inboxRangeChange: this.inboxrangeChanges,
            enagagementRangeChange: this.readrangeChanges,
            SPFRangeChange: this.SPFrangeChanges,
            DKIMRangeChange: this.DKIMRangeChanges,
            CampaignChange: this.CampaignChange,
            inboxDone: false,
            engagementDone: false,
            spfDone: false,
            dkimDone: false,
            CampaignDone: false,
            intelliseedDone: false,
            modalheader: "",
            inboxrangeBefore: 0,
            inboxrangelabelBefore: 0,
            inboxrange: this.inboxranges,
            inboxrangelabel: this.inboxrangeslabel,
            engagementrangeBefore: 0,
            engagementrangelabelBefore: 0,
            engagementrange: this.URLengagementrange,
            engagementrangelabel: this.URLengagementrangelabel,
            SPFrangeBefore: 0,
            SPFrangelabelBefore: 0,
            SPFrange: this.URLSPFrange,
            SPFrangelabel: this.URLSPFrangelabel,
            DKIMrangeBefore: 0,
            DKIMrangelabelBefore: 0,
            DKIMrange: this.URLDKIMrange,
            DKIMrangelabel: this.URLDKIMrange,
            intelliseedBefore: null,
            modalName: "0",
            domain: this.DomainName,
            domainSummary: "",
            domaindeliverability: null,
            classNameIndex: this.classNameIndexs,
            classNameEngagementReadRate: this.URLclassNameEngagementReadRate,
            classNameSpf: this.URLclassNameSpf,
            classNameDkim: this.URLclassNameDKIM,
            classNameMinValume: this.URLclassNameMinValume,
            classNameCampaignMin: this.URLclassNameCampaignMin,
            classNameIndexBoxvisible: "inboxRange",
            classNameEnagagementBoxvisible: "inboxRange2",
            classNameSPFBoxvisible: "inboxRange2",
            classNameDKIMBoxvisible: "inboxRange2",
            classNameCampaignBoxvisible: "inboxRange2",
            classNameEngagedButton: "engagedbutton",
            classNameUnEngagedButton: "engagedbutton",
            clearButton: false,
            ClassNameIndexBox: this.ClassNameIndexBoxs,
            classNameEngagementBox: this.URLclassNameEngagementBox,
            classNameSpfBox: this.URLclassNameSpfBox,
            classNameDkimBox: this.URLclassNameDkimBox,
            classNameCampaignBox: this.URLclassNameCampaignBox,
            classNameIntelliseedBox: this.URLclassNameIntelliseedBox,
            indextoggle: false,
            engagementtoggle: false,
            spftoggle: false,
            rulestoggle: false,
            imageIndex: this.imageIndexs,
            imageEngagementReadRate: this.URLimageEngagementReadRate,
            ImageSpf: this.URLImageSpf,
            imageDkim: this.URLImageDKIM,
            imageMinValume: this.URLimageMinValume,
            imageCampaignMin: this.URLimageCampaignMin,
            rulesMdlName: "",
            rulesMdlSimulatedEng: "0",
            rulesMdlPercentList: "",
            rulesMdlCampaignMinVal: this.URLrulesMdlCampaignMinVal,
            rulesMdlCampaignMinValBefore: 0,
            rulesMdlFilterByRegion: false,

            rulesMdlNorthAmericaCanada: false,
            rulesMdlNorthAmericaUS: false,
            rulesMdlAsiaPacific: false,

            rulesMdlForm: "1",
            accountId: this.accountId,
            cancelclicked: false,
            toggleIntelliseed: false,
            intelliseedLists: this.intelliseedSelected,
            seedsActive: null,
            defaultSeeds: this.intelliseed,
            intelliseedCancelClicked: false,
            refreshtoken: this.refreshtoken,
            member_id: this.member_id,
            restInstance: this.restInstance,
            soapInstance: this.soapInstance,
            DEexternalKeyDomainConfiguration:
              this.DEexternalKeyDomainConfiguration,
            DEexternalKeyIntelliseedLists: this.DEexternalKeyIntelliseedLists,
            FolderID: this.FolderID,
          };

          this.handleChangeBack = this.handleChangeBack.bind(this);
          this.handleChangeNext = this.handleChangeNext.bind(this);
          this.handleChangeCancel = this.handleChangeCancel.bind(this);
          this.handleVerifyMyAccount = this.handleVerifyMyAccount.bind(this);
          this.handleThresholdRulesButtons =
            this.handleThresholdRulesButtons.bind(this);
          this.clearThresholdRulesButtons =
            this.clearThresholdRulesButtons.bind(this);
          this.openModal = this.openModal.bind(this);

          this.redirectFromWizardSteps =
            this.redirectFromWizardSteps.bind(this);
        }

        //used in Build new intelliseed modal for engage and unengage buttons
        engageButtonChange = (buttonClass, buttonname) => (event) => {
          if (buttonname == "engageButton") {
            let ClassEngagebutton =
              buttonClass == "engagedChange"
                ? "engagedbutton"
                : "engagedChange";
            this.setState({ classNameEngagedButton: ClassEngagebutton });
          }
          if (buttonname == "unEngageButton") {
            let ClassUnEngagebutton =
              buttonClass == "engagedChange"
                ? "engagedbutton"
                : "engagedChange";
            this.setState({ classNameUnEngagedButton: ClassUnEngagebutton });
          }
        };
        setvalue = (buttonname) => {
          if (buttonname == "1") {
            this.setState({ inboxRangeChange: !this.state.inboxRangeChange });
          }
        };

        //function used for the Done button in modal
        openModal = (event) => {
          let modalname = event.target.dataset.buttonname;
          var consolidatedDomainNameSplited;
          var consolidatedDomainIDSplited;
          // this.setvalue(nam);
          if (modalname == "1") {
            this.setState({ inboxRangeChange: true });
          }
          if (modalname == "1b") {
            this.setState({ enagagementRangeChange: true });
          }
          if (modalname == "1c") {
            this.setState({ SPFRangeChange: true });
          }
          if (modalname == "1d") {
            this.setState({ DKIMRangeChange: true });
          }

          let consolidatedDomainName = "";
          let consolidatedDomainID = "";
          let uniqueintelliseedlistforde = "";
          let inboxThreshold = this.state.inboxRangeChange
            ? Math.round(parseInt(this.state.inboxrange))
            : " ";
          let engagementThreshold = this.state.enagagementRangeChange
            ? Math.round(parseInt(this.state.engagementrange))
            : " ";
          let SPFThreshold = this.state.SPFRangeChange
            ? Math.round(parseInt(this.state.SPFrange))
            : " ";
          let DKIMThreshold = this.state.DKIMRangeChange
            ? Math.round(parseInt(this.state.DKIMrange))
            : " ";

          if (this.state.intelliseedLists.length > 0) {
            for (let i = 0; i < this.state.intelliseedLists.length; i++) {
              if (i == this.state.intelliseedLists.length - 1) {
                uniqueintelliseedlistforde += this.state.intelliseedLists[i];
              } else {
                uniqueintelliseedlistforde +=
                  this.state.intelliseedLists[i] + ",";
              }
            }

            var uniqueIntelliseedSplited =
              uniqueintelliseedlistforde.split(",");
          }

          if (this.state.domain == "Apply to all domains") {
            for (var i = 0; i < this.state.data.length; i++) {
              if (i != this.state.data.length - 1) {
                consolidatedDomainName += this.state.data[i]["domain"] + ",";
                consolidatedDomainID += this.state.data[i]["domainId"] + ",";
              } else {
                consolidatedDomainName += this.state.data[i]["domain"];
                consolidatedDomainID += this.state.data[i]["domainId"];
              }
            }

            consolidatedDomainNameSplited = consolidatedDomainName.split(",");
            consolidatedDomainIDSplited = consolidatedDomainID.split(",");
          }

          let thresholdRecipe;
          let rulesRecipe;

          if (this.state.indextoggle && this.state.spftoggle) {
            thresholdRecipe = "(Ir+Er) (or) (spf+dkim)";
          }

          //both are OR
          else if (!this.state.indextoggle && !this.state.spftoggle) {
            thresholdRecipe = "(Ir(or)Er) (or) (sp(or)dkim)";
          }

          //inbox AND and SPF OR
          else if (this.state.indextoggle && !this.state.spftoggle) {
            thresholdRecipe = "(Ir+Er) (or) (sp(or)dkim)";
          }

          //inbox OR and SPF AND
          else if (!this.state.indextoggle && this.state.spftoggle) {
            thresholdRecipe = "(Ir(or)Er) (or) (sp+dkim)";
          } else {
          }

          if (this.state.rulestoggle) {
            rulesRecipe = "Cm+Is";
          } else {
            rulesRecipe = "Cm(or)Is";
          }

          let domainConfigurationData = [
            {
              keys: {
                "Domain Name": this.state.domain,
              },
              values: {
                "Domain ID": [this.state][0][this.state.domain + "Id"],
                "Inbox Threshold": inboxThreshold,
                "Engagement Threshold": engagementThreshold,
                "SPF Threshold": SPFThreshold,
                "DKIM Threshold": DKIMThreshold,
                "Campaign Min": this.state.rulesMdlCampaignMinVal,
                "Intelliseed Lists": uniqueintelliseedlistforde,
                "Threshold Recipe": thresholdRecipe,
                "Rules Recipe": rulesRecipe,
                "Created or Modified by": this.state.namex,
                consolidatedDomainName: consolidatedDomainName,
                consolidatedDomainID: consolidatedDomainID,
              },
            },
          ];
          if (this.state.inboxRangeChange == true) {
            this.setState({ inboxDone: true });
            this.setState({ imageIndex: "/images/inbox_light.png" });
            this.setState({ classNameIndex: "outderDiv1" });
            this.setState({ ClassNameIndexBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          } else if (modalname == "1" && this.state.inboxRangeChange == false) {
            this.setState({ inboxDone: false });
            this.setState({ imageIndex: "/images/inbox_light.png" });
            this.setState({ classNameIndex: "outderDiv1" });
            this.setState({ ClassNameIndexBox: true });

            loadDataForDomainConfiguration(domainConfigurationData, this);
          }
          if (this.state.enagagementRangeChange == true) {
            this.setState({ engagementDone: true });
            this.setState({
              imageEngagementReadRate: "/images/engagement_light.png",
            });
            this.setState({ classNameEngagementReadRate: "outderDiv1" });
            this.setState({ classNameEngagementBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          } else if (
            modalname == "1b" &&
            this.state.enagagementRangeChange == false
          ) {
            this.setState({ engagementDone: false });
            this.setState({ inboxToggleVisible: true });
            this.setState({ engagementToggleVisible: true });

            this.setState({
              imageEngagementReadRate: "/images/engagement_light.png",
            });
            this.setState({ classNameEngagementReadRate: "outderDiv1" });
            this.setState({ classNameEngagementBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          }
          if (this.state.SPFRangeChange == true) {
            this.setState({ spfDone: true });
            this.setState({ ImageSpf: "/images/spf_light.png" });
            this.setState({ classNameSpf: "outderDiv1" });
            this.setState({ classNameSpfBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          } else if (modalname == "1c" && this.state.SPFRangeChange == false) {
            this.setState({ spfDone: false });
            this.setState({ SPFToggleVisible: true });
            this.setState({ ImageSpf: "/images/spf_light.png" });
            this.setState({ classNameSpf: "outderDiv1" });
            this.setState({ classNameSpfBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          }
          if (this.state.DKIMRangeChange == true) {
            this.setState({ dkimDone: true });
            // this.setState({SPFToggleVisible:true});
            this.setState({ imageDkim: "/images/dkim_light.png" });
            this.setState({ classNameDkim: "outderDiv1" });
            this.setState({ classNameDkimBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          } else if (modalname == "1d" && this.state.DKIMRangeChange == false) {
            this.setState({ dkimDone: false });
            this.setState({ DKIMToggleVisible: true });
            this.setState({ imageDkim: "/images/dkim_light.png" });
            this.setState({ classNameDkim: "outderDiv1" });
            this.setState({ classNameDkimBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          }
          if (this.state.CampaignChange == true) {
            this.setState({ CampaignDone: true });
            this.setState({ imageMinValume: "/images/campaign_min_light.png" });
            this.setState({ classNameMinValume: "campaignoutderDiv" });
            this.setState({ classNameCampaignBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          } else if (modalname == "2a" && this.state.CampaignChange == false) {
            this.setState({ CampaignDone: false });
            this.setState({ CampaignToggleVisible: true });
            this.setState({ imageMinValume: "/images/campaign_min_light.png" });
            this.setState({ classNameMinValume: "campaignoutderDiv" });
            this.setState({ classNameCampaignBox: true });
            loadDataForDomainConfiguration(domainConfigurationData, this);
          }

          let intelliseedListsData = [];
          if (this.state.classNameIntelliseedBox == true) {
            this.setState({ intelliseedDone: true });
            this.setState({
              imageCampaignMin: "/images/intelliseed_light.png",
            });
            this.setState({ classNameCampaignMin: "campaignoutderDiv" });
            loadDataForDomainConfiguration(domainConfigurationData, this);

            if (this.state.domain != "Apply to all domains") {
              if (uniqueIntelliseedSplited.length > 0) {
                for (var i = 0; i < uniqueIntelliseedSplited.length; i++) {
                  var num = i + 1;
                  if (i != uniqueIntelliseedSplited.length - 1) {
                    intelliseedListsData.push({
                      keys: {
                        "Domain Name": this.state.domain + "-" + num,
                      },
                      values: {
                        "Domain ID": [this.state][0][this.state.domain + "Id"],
                        "Intelliseed List Name": uniqueIntelliseedSplited[i],
                        "Percent of List": [this.state][0][
                          uniqueIntelliseedSplited[i] + "PercentofList"
                        ],
                      },
                    });
                  } else {
                    intelliseedListsData.push({
                      keys: {
                        "Domain Name": this.state.domain + "-" + num,
                      },
                      values: {
                        "Domain ID": [this.state][0][this.state.domain + "Id"],
                        "Intelliseed List Name": uniqueIntelliseedSplited[i],
                        "Percent of List": [this.state][0][
                          uniqueIntelliseedSplited[i] + "PercentofList"
                        ],
                      },
                    });
                    console.log(
                      "Intellseed Data :::" +
                        JSON.stringify(intelliseedListsData)
                    );
                    loadDataForIntelliseedLists(intelliseedListsData, this);
                    let intelliseedName = this.state.intelliseedData;
                    let responseData = this.state.defaultSeeds;
                    filterIdDataFromSparkpost(
                      responseData,
                      intelliseedName,
                      this.state.accountId,
                      this.state,
                      this
                    );
                  }
                }
              }
            } else {
              //let consolidatedRowLengthISL = uniqueIntelliseedSplited.length * consolidatedDomainName.length;
              for (var i = 0; i < consolidatedDomainNameSplited.length; i++) {
                for (var j = 0; j < uniqueIntelliseedSplited.length; j++) {
                  let num = j + 1;
                  intelliseedListsData.push({
                    keys: {
                      "Domain Name":
                        consolidatedDomainNameSplited[i] + "-" + num,
                    },
                    values: {
                      "Domain ID": consolidatedDomainIDSplited[i],
                      "Intelliseed List Name": uniqueIntelliseedSplited[j],
                      "Percent of List": [this.state][0][
                        uniqueIntelliseedSplited[j] + "PercentofList"
                      ],
                    },
                  });
                  loadDataForIntelliseedLists(intelliseedListsData, this);
                }
              }

              //consolidatedDomainName: consolidatedDomainName,
              //consolidatedDomainID: consolidatedDomainID,
              let intelliseedName = this.state.intelliseedData;
              let responseData = this.state.defaultSeeds;
              filterIdDataFromSparkpost(
                responseData,
                intelliseedName,
                this.state.accountId,
                this.state,
                this
              );
            }
          }

          this.setState({ modalClicked: false });
          const modalVisible = !this.state.modalVisible;

          var Dtaa = modalVisible;
          this.setState({ modalVisible: modalVisible });

          if (modalVisible == false) {
            this.setState({ rulesMdlForm: "1" });
          }

          // this.setState({modalVisible2:modalVisible});

          var x = document.getElementsByClassName("modal-backdrop fade show");
          if (!modalVisible) {
            var i;
            for (i = 0; i < x.length; i++) {
              x[i].className = "ab";
            }
          }
        };

        //we are using componentDidMount for obtain the authentication code for web app
        //and for storing the toggled value of the intelliseed dynamically after redirecting
        componentDidMount() {
          let thisdata = this;
          //var PercentofListPushed = thisdata.intelliseed;
          if (thisdata.intelliseed != null) {
            for (var i = 0; i < thisdata.intelliseed.length; i++) {
              thisdata.setState({
                [thisdata.intelliseed[i].name +
                "-" +
                thisdata.intelliseed[i].filterSetId +
                "PercentofList"]: thisdata.intelliseed[i].percentOfList,
              });
            }
          }

          if (thisdata.domaindata != null) {
            //this.domaindata = JSON.parse(DomainData);
            //let thisdata = this;
            console.log(
              "thisdata.domaindata " + JSON.stringify(thisdata.domaindata)
            );
            thisdata.domaindata.map((api) => {
              thisdata.setState({
                [api.domain + "Id"]: api.domainId,
              });
            });
          }

          var arr1 = thisdata.URLintelliseedData;
          var arr2 = thisdata.intelliseedSelected;
          var arr = [];
          if (arr1 != null && arr2 != []) {
            for (var i = 0; i < arr1.length; i++) {
              arr.push(arr1[i]);
            }
            var res = arr1.filter((item) => arr2.includes(item));
            var IntelliseedSplited = JSON.parse(JSON.stringify(res).split(","));
            var toggledIntelliseed = [];

            for (var i = 0; i < IntelliseedSplited.length; i++) {
              toggledIntelliseed.push(IntelliseedSplited[i]);
            }

            for (var i = 0; i < toggledIntelliseed.length; i++) {
              toggledIntelliseed[i].replace(/[\[\]'"]/g, "");
              this.setState({ [toggledIntelliseed[i] + "toggleStatus"]: true });
            }
          }
          if (
            thisdata.state.authorization_code != "" &&
            thisdata.state.authorization_code != undefined
          ) {
            accessTokenGeneration(thisdata);
          }
        }

        //handling the cancel functionality
        handleChangeCancel(event) {
          var modalname = event.target.dataset.buttonname;

          if (this.state.modalClicked == true && this.state.page == 2) {
            if (modalname == "1") {
              if (this.state.inboxDone) {
                this.setState({ inboxRangeChange: true });
              } else {
                this.setState({ inboxRangeChange: false });
              }

              this.setState({ inboxrange: this.state.inboxrangeBefore });
              this.setState({ inboxrangelabel: this.state.inboxrangeBefore });
            }
            if (modalname == "1b") {
              if (this.state.engagementDone) {
                this.setState({ enagagementRangeChange: true });
              } else {
                this.setState({ enagagementRangeChange: false });
              }
              //
              this.setState({
                engagementrange: this.state.engagementrangeBefore,
              });
              this.setState({
                engagementrangelabel: this.state.engagementrangeBefore,
              });
            }
            if (modalname == "1c") {
              if (this.state.spfDone) {
                this.setState({ SPFRangeChange: true });
              } else {
                this.setState({ SPFRangeChange: false });
              }
              this.setState({ SPFrange: this.state.SPFrangeBefore });
              this.setState({ SPFrangelabel: this.state.SPFrangelabelBefore });
            }
            if (modalname == "1d") {
              if (this.state.dkimDone) {
                this.setState({ DKIMRangeChange: true });
              } else {
                this.setState({ DKIMRangeChange: false });
              }
              this.setState({ DKIMrange: this.state.DKIMrangeBefore });
              this.setState({
                DKIMrangelabel: this.state.DKIMrangelabelBefore,
              });
            }
            if (modalname == "2a") {
              if (this.state.CampaignDone) {
                this.setState({ CampaignChange: true });
              } else {
                this.setState({ CampaignChange: false });
              }
              this.setState({
                rulesMdlCampaignMinVal: this.state.rulesMdlCampaignMinValBefore,
              });
            }
            if (modalname == "2b") {
              if (this.state.intelliseedDone) {
                this.setState({ classNameIntelliseedBox: true });
              } else {
                this.setState({ classNameIntelliseedBox: false });
              }
              if (
                this.state.intelliseedBefore != null &&
                this.state.intelliseedBefore != ""
              ) {
                var arr1 = this.state.intelliseedData,
                  arr2 = this.state.intelliseedBefore,
                  res = arr1.filter((item) => !arr2.includes(item));
                for (var i = 0; i < this.state.intelliseedBefore.length; i++) {
                  let intelliseedFor = this.state.intelliseedBefore[i];
                  this.setState({
                    [intelliseedFor + "toggleStatus"]: true,
                  });
                }

                for (var i = 0; i < res.length; i++) {
                  let resFor = res[i];
                  this.setState({
                    [resFor + "toggleStatus"]: false,
                  });
                }
                this.setState({ intelliseedLists: arr2 });
              } else {
                this.setState({ classNameIntelliseedBox: false });
                for (var i = 0; i < this.state.intelliseedLists.length; i++) {
                  let ISLfor = this.state.intelliseedLists[i];
                  this.setState({
                    [ISLfor + "toggleStatus"]: false,
                  });
                }
                this.setState({ intelliseedLists: [] });
              }
            }

            this.setState({ modalClicked: false });
            const modalVisible = !this.state.modalVisible;

            var Dtaa = modalVisible;
            this.setState({ modalVisible: modalVisible });

            var x = document.getElementsByClassName("modal-backdrop fade show");
            if (!modalVisible) {
              var i;
              for (i = 0; i < x.length; i++) {
                x[i].className = "ab";
              }
            }
          } else {
            alert("Cancel button clicked !!!");
          }
        }

        //Handling user ID verification functionality
        handleVerifyMyAccount(event) {
          let callResponse;
          let thisdata = this;
          let accountId = thisdata.state.accountId;
          let UserID = this.state.namex;
          if (UserID != null) {
            UserID = UserID.replace(/^\s+|\s+$/gm, "");
            if (UserID.length == 0) {
              ReactDOM.render(
                <p style={{ color: "red" }}>User ID is mandatory.</p>,
                document.getElementById("valMsgnamex")
              );
            } else {
              axios({
                method: "POST",
                url: "/sparkpostverify",
                data: { UserId: this.state.namex },
                //headers: {'Content-Type': 'application/json' }
              })
                .then(function (response) {
                  console.log(
                    "sparkpost verify ::: " + JSON.stringify(response.data)
                  );

                  let responseData = response.data;

                  if (response.data[0].accountId != undefined) {
                    //console.log("call response ::: " + response.data[0].accountId)
                    callResponse = response;
                    console.log(
                      "call response ::: " + response.data[0].accountId
                    );
                    thisdata.setState({
                      accountId: JSON.stringify(callResponse.data[0].accountId),
                    });

                    thisdata.setState({
                      userId: JSON.stringify(callResponse.data[0].userId),
                    });
                    thisdata.setState({ Page1ValidationStatus: 1 });
                    thisdata.setState({
                      loadPage2: true,
                    });

                    //const thisdata = this;
                    const params = {
                      accountId: JSON.stringify(callResponse.data[0].accountId),
                    };
                    var intelliseedFetched = {};
                    var intelliseedName = [];
                    axios({
                      method: "GET",
                      url: "/getavailabledomains",
                      params: params,
                    })
                      .then(function (response) {
                        response.data.map((api) => {
                          thisdata.setState({
                            [api.domain + "Id"]: api.domainId,
                          });
                          rowCount(
                            thisdata,
                            thisdata.state.refreshtoken,
                            thisdata.state.soapInstance,
                            thisdata.state.member_id,
                            api.domain
                          );
                        });

                        thisdata.setState({
                          data: response.data,
                        });
                        thisdata.setState({
                          loadPage2: true,
                        });
                      })
                      .catch(function (error) {
                        console.log("error++" + error);
                      });
                  }
                })
                .catch(function (error) {
                  thisdata.setState({ Page1ValidationStatus: 2 });
                  thisdata.setState({
                    loadPage2: false,
                  });
                });
            }
          }
          //alert("Verify My Account button clicked");
        }

        //clears the data changed or entered and displays the gray square icons
        clearThresholdRulesButtons = (param) => (event) => {
          event.stopPropagation();

          if (param == "inboxClear") {
            this.setState({ clearButton: true });
            this.setState({ modalVisible: false });
            this.setState({ inboxRangeChange: false });
            this.setState({ inboxrange: 50 });
            this.setState({ inboxrangelabel: 50 });
            this.setState({ inboxToggleVisible: false });
            this.setState({ ClassNameIndexBox: false });
            this.setState({ imageIndex: "/images/inbox_idle.png" });
            //Change Class (Backgound Color)
            this.setState({ classNameIndex: "outderDiv" });
            this.setState({ inboxDone: false });
          }
          if (param == "enagagementClear") {
            this.setState({ enagagementRangeChange: false });
            this.setState({ engagementrange: 0 });
            this.setState({ engagementrangelabel: 0 });
            this.setState({ engagementToggleVisible: false });
            this.setState({ modalVisible: false });
            this.setState({ clearButton: true });
            this.setState({ classNameEngagementBox: false });
            this.setState({
              imageEngagementReadRate: "/images/engagement_idle.png",
            });
            this.setState({
              classNameEngagementReadRate: "outderDiv",
            });
            this.setState({ engagementDone: false });
          } else if (param == "spfClear") {
            this.setState({ SPFRangeChange: false });
            this.setState({ clearButton: true });
            this.setState({ modalVisible: false });
            this.setState({ SPFrange: 90 });
            this.setState({ SPFrangelabel: 90 });
            this.setState({ SPFToggleVisible: false });
            this.setState({ classNameSpfBox: false });
            this.setState({ ImageSpf: "/images/spf_idle.png" });
            this.setState({ classNameSpf: "outderDiv" });
            this.setState({ spfDone: false });
          } else if (param == "dkimClear") {
            this.setState({ DKIMRangeChange: false });
            this.setState({ clearButton: true });
            this.setState({ modalVisible: false });
            this.setState({ DKIMrange: 90 });
            this.setState({ DKIMrangelabel: 90 });
            this.setState({ DKIMToggleVisible: false });
            this.setState({ classNameDkimBox: false });
            this.setState({
              imageDkim: "/images/dkim_idle.png",
            });
            this.setState({ classNameDkim: "outderDiv" });
            this.setState({ dkimDone: false });
          } else if (param == "campaignClear") {
            this.setState({ CampaignChange: false });
            this.setState({ rulesMdlCampaignMinVal: "" });
            this.setState({ clearButton: true });
            this.setState({ modalVisible: false });
            this.setState({ CampaignToggleVisible: false });
            this.setState({ classNameCampaignBox: false });
            this.setState({
              imageMinValume: "/images/campaign_min_idle.png",
            });
            this.setState({ classNameMinValume: "outderDiv" });
            this.setState({ CampaignDone: false });
          } else if (param == "intelliseedClear") {
            var toggledIntelliseed = [];

            for (var i = 0; i < this.state.intelliseedLists.length; i++) {
              toggledIntelliseed.push(this.state.intelliseedLists[i]);
            }
            for (var i = 0; i < toggledIntelliseed.length; i++) {
              this.setState({
                [toggledIntelliseed[i] + "toggleStatus"]: false,
              });
            }
            this.setState({ intelliseedLists: [] });
            this.setState({ intelliseedBefore: [] });
            this.setState({
              imageCampaignMin: "/images/intelliseed_idle.png",
            });
            this.setState({
              classNameCampaignMin: "outderDiv",
            });
            this.setState({ classNameIntelliseedBox: false });
            this.setState({ intelliseedDone: false });
          }
        };

        //data to be displayed when we click the square icons
        handleThresholdRulesButtons = (param) => (event) => {
          if (this.state.clearButton == false) {
            let changesparam;
            var ValidationStatus = true;
            let nam = event.target.name;
            let val;
            if (param == "btn1data") {
              val = this.state.inboxrange;
              this.setState({ inboxrangeBefore: val });
              this.setState({ inboxrangelabelBefore: val });
            } else if (param == "btn2data") {
              val = this.state.engagementrange;
              this.setState({ engagementrangeBefore: val });
              this.setState({ engagementrangelabelBefore: val });
            } else if (param == "btn3data") {
              val = this.state.SPFrange;
              this.setState({ SPFrangeBefore: val });
              this.setState({ SPFrangelabelBefore: val });
            } else if (param == "btn4data") {
              val = this.state.DKIMrange;
              this.setState({ DKIMrangeBefore: val });
              this.setState({ DKIMrangelabelBefore: val });
            }
            //rulesMdlCampaignMinVal
            else if (param == "btn5data") {
              val = this.state.rulesMdlCampaignMinVal;
              this.setState({ rulesMdlCampaignMinValBefore: val });
            }

            let domainvalue = this.state.domain;
            if (
              domainvalue != "" &&
              domainvalue != undefined &&
              domainvalue != null &&
              domainvalue != ""
            ) {
              this.setState({ modalVisible: true });
              this.setState({ modalClicked: true });
              if (param == "btn1data") {
                this.setState({ [param]: "Input > X" });
                this.setState({
                  modalheader:
                    " Thresholds - Inbox Configuration : " + this.state.domain,
                });
                this.setState({ modalName: "1" });
                this.setState({ inboxrange: val }); // Inbox Range Value
                var marginLeft = val != 1 ? (val - 50) * 2 + "%" : 1 + "%";
                this.setState({ inboxrangelabel: marginLeft }); //Inbox Range Label

                //Inputs
                this.setState({ btn1data: val });

                //this.openModal();
              } else if (param == "btn2data") {
                this.setState({
                  modalheader:
                    " Thresholds - Engagement Read Rate : " + this.state.domain,
                });
                this.setState({ [param]: "Spam > X" });
                this.setState({ modalName: "1b" });
                this.setState({ engagementrange: val });
                var marginLeft = val != 0 ? val + "%" : 0 + "%";
                this.setState({ engagementrangelabel: marginLeft });
                this.setState({ btn2data: val });
                //this.openModal();
              } else if (param == "btn3data") {
                this.setState({
                  modalheader: " Thresholds - SPF : " + this.state.domain,
                });
                this.setState({ [param]: "SPF Results" });
                this.setState({ modalName: "1c" });
                this.setState({ SPFrange: val });
                var marginLeft =
                  val != 100
                    ? Math.round((val % 10) * 10 - 0.5) + "%"
                    : 97.1 + "%";
                this.setState({ SPFrangelabel: marginLeft });

                //Inputs
                this.setState({ btn3data: val });
                //this.openModal();
              } else if (param == "btn4data") {
                this.setState({
                  modalheader: " Thresholds - DKIM : " + this.state.domain,
                });
                this.setState({ [param]: "DKIM Results" });
                this.setState({ modalName: "1d" });
                this.setState({ DKIMrange: val }); // Inbox Range Value
                var marginLeft =
                  val != 100
                    ? Math.round((val % 10) * 10 - 0.5) + "%"
                    : 97.1 + "%";

                this.setState({ DKIMrangelabel: marginLeft }); //Inbox Range Label

                //Inputs
                this.setState({ btn4data: val });
              } else if (param == "btn5data") {
                this.setState({ modalheader: " Rules - Campaign Minimum" });
                this.setState({ [param]: "Campaign Minimum" });
                this.setState({ modalName: "2a" });
              } else if (param == "btn6data") {
                const thisdata = this;
                var intelliseedFetched = {};
                var intelliseedName = [];
                var responseData;
                this.setState({ modalheader: " Rules - Intelliseed" });
                this.setState({ [param]: "Intelliseed" });
                this.setState({ modalName: "2b" });
                if (this.state.intelliseedLists.length > 0) {
                  var toggledIntelliseed = [];
                  for (var i = 0; i < this.state.intelliseedLists.length; i++) {
                    toggledIntelliseed.push(this.state.intelliseedLists[i]);
                  }
                  //for (var i = 0; i < toggledIntelliseed.length; i++) {
                  this.setState({
                    intelliseedBefore: toggledIntelliseed,
                  });
                }
              } else {
                ReactDOM.render(
                  <p
                    style={{
                      color: "red",
                      "margin-bottom": "11px",
                      "margin-top": "9px",
                      "margin-left": "33px",
                    }}
                  >
                    Domain is mandatory.
                  </p>,
                  document.getElementById("domainCheck")
                );
              }
            }
          } else {
            this.setState({ clearButton: false });
          }
        };

        //Handling Back button functionality
        handleChangeBack(event) {
          let ipage = this.state.page - 1;
          if (ipage <= 0) {
            ipage = 1;
          }
          this.setState({ page: ipage });
        }

        //Handling Next button functionality
        handleChangeNext(event) {
          //var thisdata = this;
          //console.log("thisdata.state.rowCount : " + thisdata.state.rowCount);
          if (this.state.page == 3) {
            this.setState({ rulesMdlName: "" });
            this.setState({ rulesMdlSimulatedEng: "0" });
            this.setState({ rulesMdlPercentList: "" });
            this.setState({ rulesMdlCampaignMinVal: "" });
            this.setState({ rulesMdlFilterByRegion: false });
            this.setState({ rulesMdlNorthAmericaCanada: false });
            this.setState({ rulesMdlNorthAmericaUS: false });
            this.setState({ rulesMdlAsiaPacific: false });
          }

          var ValidationStatus = true;
          var validateMessages = [];

          if (this.state.page == 1) {
            if (this.state.namex == "") {
              ValidationStatus = false;
              ReactDOM.render(
                <p style={{ color: "red" }}>User ID is mandatory.</p>,
                document.getElementById("valMsgnamex")
              );
              return;
            } else if (this.state.Page1ValidationStatus != 1) {
              ValidationStatus = false;
              ReactDOM.render(
                <p style={{ color: "red" }}>Verify Account mandatory.</p>,
                document.getElementById("valMsgnamex")
              );
              return;
            } else {
              ReactDOM.render(<p></p>, document.getElementById("valMsgnamex"));
            }

            if (
              this.state.groupname == "" ||
              this.state.groupname == null ||
              this.state.groupname == " "
            ) {
              ValidationStatus = false;
              ReactDOM.render(
                <p style={{ color: "red" }}>Group Name is mandatory.</p>,
                document.getElementById("valMsggroupname")
              );
            } else {
              ReactDOM.render(
                <p> </p>,
                document.getElementById("valMsggroupname")
              );
            }
            if (this.state.loadPage2 == false) {
              ValidationStatus = false;
            } else {
              ValidationStatus = true;
            }

            if (this.state.rowCount > 0) {
              console.log("when rowcount greater than zero");
              var responseData;
              const thisdata = this;
              var intelliseedFetched = {};
              var intelliseedName = [];
              axios({
                method: "POST",
                url: "/fetchintelliseedlist",
                data: { accountId: this.state.accountId },
                //headers: {'Content-Type': 'application/json' }
              })
                .then(function (response) {
                  responseData = response.data;
                  for (var i = 0; i < response.data.length; i++) {
                    intelliseedName.push(
                      response.data[i].name + "-" + response.data[i].filterSetId
                    );
                    intelliseedFetched[
                      response.data[i].name + "-" + response.data[i].filterSetId
                    ] = false;
                    thisdata.setState({
                      [response.data[i].name]: response.data[i].filterSetId,
                    });

                    thisdata.setState({
                      [response.data[i].name +
                      "-" +
                      response.data[i].filterSetId +
                      "PercentofList"]: response.data[i].percentOfList,
                    });

                    thisdata.setState({
                      [response.data[i].name + "toggleStatus"]: false,
                    });
                  }

                  thisdata.setState({
                    intelliseedData: intelliseedName,
                  });

                  thisdata.setState({
                    defaultSeeds: responseData,
                  });
                  console.log("thisdata.state.namex : " + thisdata.state.namex);
                  window.location.assign(
                    "/sparkpostdashboardTrackersummary?buttonid=defaultOpen&tssd=" +
                      thisdata.state.tssd +
                      "&code=" +
                      thisdata.state.authorization_code +
                      "&userid=" +
                      thisdata.state.namex +
                      "&rt=" +
                      thisdata.state.refreshtoken +
                      "&memberid=" +
                      thisdata.state.member_id +
                      "&restInstance=" +
                      thisdata.state.restInstance +
                      "&soapInstance=" +
                      thisdata.state.soapInstance +
                      "&FolderID=" +
                      thisdata.state.FolderID +
                      "&rowCount=" +
                      thisdata.state.rowCount +
                      "&DEexternalKeyDomainConfiguration=" +
                      thisdata.state.DEexternalKeyDomainConfiguration +
                      "&DEexternalKeyIntelliseedLists=" +
                      thisdata.state.DEexternalKeyIntelliseedLists +
                      "&accountId=" +
                      thisdata.state.accountId
                  );
                })
                .catch(function (error) {
                  console.log("Intelliseederror++" + error);
                });
            } else if (
              ValidationStatus == true &&
              this.state.loadPage2 == true &&
              this.state.rowCount == 0
            ) {
              console.log("row count equals to zero ");
              const thisdata = this;
              const params = {
                accountId: this.state.accountId,
              };
              var intelliseedFetched = {};
              var intelliseedName = [];
              var responseData;

              axios({
                method: "POST",
                url: "/fetchintelliseedlist",
                data: { accountId: this.state.accountId },
                //headers: {'Content-Type': 'application/json' }
              })
                .then(function (response) {
                  responseData = response.data;
                  for (var i = 0; i < response.data.length; i++) {
                    intelliseedName.push(
                      response.data[i].name + "-" + response.data[i].filterSetId
                    );
                    intelliseedFetched[
                      response.data[i].name + "-" + response.data[i].filterSetId
                    ] = false;
                    thisdata.setState({
                      [response.data[i].name]: response.data[i].filterSetId,
                    });
                    thisdata.setState({
                      [response.data[i].name + "toggleStatus"]: false,
                    });
                    thisdata.setState({
                      [response.data[i].name +
                      "-" +
                      response.data[i].filterSetId +
                      "PercentofList"]: response.data[i].percentOfList,
                    });
                  }

                  thisdata.setState({
                    intelliseedData: intelliseedName,
                  });

                  thisdata.setState({
                    defaultSeeds: responseData,
                  });
                })
                .catch(function (error) {
                  console.log("Intelliseederror++" + error);
                });
            }
          }

          if (this.state.page == 2) {
            let thisdata = this;
            let thresholdRecipe;
            let rulesRecipe;
            let consolidatedDomainName = "";
            let consolidatedDomainID = "";
            let uniqueintelliseedlistforde = "";
            if (
              this.state.domain == "" ||
              this.state.domain == " " ||
              this.state.domain == null
            ) {
              ValidationStatus = false;
              ReactDOM.render(
                <p
                  style={{
                    color: "red",
                    "margin-bottom": "11px",
                    "margin-top": "9px",
                    "margin-left": "33px",
                  }}
                >
                  Domain is mandatory.
                </p>,
                document.getElementById("domainCheck")
              );
            }

            //both are AND
            else {
              ValidationStatus = true;
              let inboxThreshold = thisdata.state.inboxRangeChange
                ? Math.round(parseInt(thisdata.state.inboxrange))
                : "";
              let engagementThreshold = thisdata.state.enagagementRangeChange
                ? Math.round(parseInt(thisdata.state.engagementrange))
                : "";
              let SPFThreshold = thisdata.state.SPFRangeChange
                ? Math.round(parseInt(thisdata.state.SPFrange))
                : "";
              let DKIMThreshold = thisdata.state.DKIMRangeChange
                ? Math.round(parseInt(thisdata.state.DKIMrange))
                : "";
              if (thisdata.state.indextoggle && thisdata.state.spftoggle) {
                thresholdRecipe = "(Ir+Er) (or) (spf+dkim)";
              }

              //both are OR
              else if (
                !thisdata.state.indextoggle &&
                !thisdata.state.spftoggle
              ) {
                thresholdRecipe = "(Ir(or)Er) (or) (sp(or)dkim)";
              }

              //inbox AND and SPF OR
              else if (
                thisdata.state.indextoggle &&
                !thisdata.state.spftoggle
              ) {
                thresholdRecipe = "(Ir+Er) (or) (sp(or)dkim)";
              }

              //inbox OR and SPF AND
              else if (
                !thisdata.state.indextoggle &&
                thisdata.state.spftoggle
              ) {
                thresholdRecipe = "(Ir(or)Er) (or) (sp+dkim)";
              } else {
              }

              if (thisdata.state.rulestoggle) {
                rulesRecipe = "Cm+Is";
              } else {
                rulesRecipe = "Cm(or)Is";
              }

              if (this.state.domain == "Apply to all domains") {
                this.state.data.map((api) => {
                  consolidatedDomainName += api.domain + ",";
                  consolidatedDomainID += api.domainId + ",";
                });
              }
              if (thisdata.state.intelliseedLists.length > 0) {
                for (
                  let i = 0;
                  i < thisdata.state.intelliseedLists.length;
                  i++
                ) {
                  if (i == thisdata.state.intelliseedLists.length - 1) {
                    uniqueintelliseedlistforde +=
                      thisdata.state.intelliseedLists[i];
                  } else {
                    uniqueintelliseedlistforde +=
                      thisdata.state.intelliseedLists[i] + ",";
                  }
                }
              }
              let domainConfigurationData = [
                {
                  keys: {
                    "Domain Name": thisdata.state.domain,
                  },
                  values: {
                    "Domain ID": [thisdata.state][0][
                      thisdata.state.domain + "Id"
                    ],
                    "Inbox Threshold": inboxThreshold,

                    "Engagement Threshold": engagementThreshold,
                    "SPF Threshold": SPFThreshold,
                    "DKIM Threshold": DKIMThreshold,
                    "Campaign Min": thisdata.state.rulesMdlCampaignMinVal,
                    "Intelliseed Lists": uniqueintelliseedlistforde,
                    "Threshold Recipe": thresholdRecipe,
                    "Rules Recipe": rulesRecipe,
                    consolidatedDomainName: consolidatedDomainName,
                    consolidatedDomainID: consolidatedDomainID,
                  },
                },
              ];
              loadDataForDomainConfiguration(domainConfigurationData, this);
            }
          }

          if (ValidationStatus == true) {
            let Response;

            let ipage = this.state.page + 1;
            if (ipage == 4) {
              console.log("this.state.refreshtoken " + this.state.refreshtoken);
              window.location.assign(
                "/sparkpostdashboardTrackersummary?buttonid=defaultOpen&tssd=" +
                  this.state.tssd +
                  "&code=" +
                  this.state.authorization_code +
                  "&userid=" +
                  this.state.namex +
                  "&rt=" +
                  this.state.refreshtoken +
                  "&memberid=" +
                  this.state.member_id +
                  "&restInstance=" +
                  this.state.restInstance +
                  "&soapInstance=" +
                  this.state.soapInstance +
                  "&FolderID=" +
                  this.state.FolderID +
                  "&rowCount=" +
                  1 +
                  "&DEexternalKeyDomainConfiguration=" +
                  this.state.DEexternalKeyDomainConfiguration +
                  "&DEexternalKeyIntelliseedLists=" +
                  this.state.DEexternalKeyIntelliseedLists +
                  "&accountId=" +
                  this.state.accountId
              );
              //const params = {
              //  classname: "default",
              //};
              //window.location.assign(
              //  "/sparkpostdashboardget?userid=" + this.state.namex
              //);
            }
            //this.setState({ page: ipage });
            this.setState({ page: parseInt(this.state.page) + 1 });
          }
        }

        //this is used for the build new intelliseed checkbox functionality
        myBtnClickHandler = () => {
          this.setState({ rulesMdlNorthAmericaCanada: false });
          this.setState({ rulesMdlNorthAmericaUS: false });
          this.setState({ rulesMdlAsiaPacific: false });
          this.setState({ modalName: "2c" });
          this.setState({ rulesMdlPercentList: "" });
        };

        //Handling the changes in the modal
        myChangeHandler = (event) => {
          let nam = event.target.name;
          let val = event.target.value;
          let clsname = event.target.className;

          this.setState({ [nam]: val });

          if (clsname == "toggleIntelliseed") {
            if ([this.state][0][nam + "toggleStatus"] == false) {
              let intelliseedLists = this.state.intelliseedLists
                ? this.state.intelliseedLists
                : [];

              this.setState({ [nam + "toggleStatus"]: true });
              this.setState({ classNameIntelliseedBox: true });
              intelliseedLists.push(nam);
              let uniqueintelliseedLists = intelliseedLists.filter(
                (c, index) => {
                  return intelliseedLists.indexOf(c) === index;
                }
              );

              this.setState({ intelliseedLists: uniqueintelliseedLists });
            } else {
              this.setState({ [nam + "toggleStatus"]: false });
              let intelliseedLists = this.state.intelliseedLists
                ? this.state.intelliseedLists
                : [];
              delete intelliseedLists[nam];

              intelliseedLists = intelliseedLists.filter((e) => e != nam);
              this.setState({ intelliseedLists: intelliseedLists });
              if (intelliseedLists.length > 0) {
                this.setState({ classNameIntelliseedBox: true });
              } else {
                this.setState({ classNameIntelliseedBox: false });
              }
            }
          }

          if (clsname == "spanindex") {
            var iToggleStatus = this.state.indextoggle;
            if (iToggleStatus == true) {
              this.setState({ indextoggle: false });
            } else {
              this.setState({ indextoggle: true });
            }
          }

          if (clsname == "spanspf") {
            var iToggleStatus = this.state.spftoggle;
            if (iToggleStatus == true) {
              this.setState({ spftoggle: false });
            } else {
              this.setState({ spftoggle: true });
            }
          }

          if (clsname == "spanrules") {
            var iToggleStatus = this.state.rulestoggle;
            if (iToggleStatus == true) {
              this.setState({ rulestoggle: false });
            } else {
              this.setState({ rulestoggle: true });
            }
          }

          if (nam == "groupname") {
            ReactDOM.render(
              <p></p>,
              document.getElementById("valMsggroupname")
            );
          }
          if (nam == "namex") {
            ReactDOM.render(<p></p>, document.getElementById("valMsgnamex"));
          }

          if (nam == "namex") {
            if (val != "" && val != " " && val != null) {
              this.setState({ namex: val });
            }
          }
          if (nam == "groupname") {
            if (val != "" && val != " " && val != null) {
              this.setState({ groupname: val });
            }
          }

          if (nam == "inboxrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ inboxRangeChange: true }); // used for background color change
              this.setState({ inboxrange: val }); // Inbox Range Value
              var marginLeft = val != 1 ? (val - 50) * 2 + "%" : 1 + "%";
              this.setState({ inboxrangelabel: marginLeft }); //Inbox Range Label

              //Inputs
              this.setState({ btn1data: val });
            }
          }

          if (nam == "engagementrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ enagagementRangeChange: true });
              this.setState({ engagementrange: val });
              var marginLeft = val + "%";
              this.setState({ engagementrangelabel: marginLeft });

              //Inputs
              this.setState({ btn2data: val });
            }
          }

          if (nam == "SPFrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ SPFRangeChange: true });
              this.setState({ SPFrange: val });
              var marginLeft =
                val != 100
                  ? Math.round((val % 10) * 10 - 0.5) + "%"
                  : 97.1 + "%";
              this.setState({ SPFrangelabel: marginLeft });

              //Inputs
              this.setState({ btn3data: val });
            }
          }

          if (nam == "DKIMrange") {
            if (val != "" && val != " " && val != null) {
              this.setState({ DKIMRangeChange: true });
              this.setState({ DKIMrange: val }); // Inbox Range Value
              var marginLeft =
                val != 100
                  ? Math.round((val % 10) * 10 - 0.5) + "%"
                  : 97.1 + "%";

              this.setState({ DKIMrangelabel: marginLeft }); //Inbox Range Label

              //Inputs
              this.setState({ btn4data: val });
            }
          }

          if (nam == "rulesMdlName") {
            this.setState({ rulesMdlName: val });
          }
          if (nam == "rulesMdlSimulatedEng") {
            this.setState({ rulesMdlSimulatedEng: val });
          }
          if (nam == "rulesMdlPercentList") {
            this.setState({ rulesMdlPercentList: val });
          }

          if (nam == "rulesMdlCampaignMinVal") {
            if (val != "" && val != null) {
              this.setState({ CampaignChange: true });
              this.setState({ rulesMdlCampaignMinVal: val });
            }
          }

          if (nam == "rulesMdlFilterByRegion") {
            var FbrStatus = this.state.rulesMdlFilterByRegion;
            var blnValue1 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlFilterByRegion: blnValue1 });
          }
          if (nam == "rulesMdlNorthAmericaCanada") {
            var FbrStatus = this.state.rulesMdlNorthAmericaCanada;
            var blnValue2 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlNorthAmericaCanada: blnValue2 });
          }
          if (nam == "rulesMdlNorthAmericaUS") {
            var Status = this.state.rulesMdlNorthAmericaUS;
            var blnValue3 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlNorthAmericaUS: blnValue3 });
          }
          if (nam == "AsiaPacific") {
            var FbrStatus = this.state.rulesMdlAsiaPacific;
            var blnValue4 = FbrStatus == true ? false : true;
            this.setState({ rulesMdlAsiaPacific: blnValue4 });
          }
        };

        redirectFromWizardSteps(event) {
          let Clsname = event.currentTarget.classList[1];
          const CurrentPageNo = this.state.page;
          var RedirectingPageNo = 0;
          if (Clsname == "Div1") {
            RedirectingPageNo = 1;
          } else if (Clsname == "Div2") {
            RedirectingPageNo = 2;
          } else if (Clsname == "Div3") {
            RedirectingPageNo = 3;
          }

          if (RedirectingPageNo <= CurrentPageNo) {
            this.setState({ page: RedirectingPageNo });
          }
        }

        //Handling the domain change functionality in drop down list
        onChangeValue = (event) => {
          console.log("For onchange value :::" + this.state.rowCount);
          console.log("memberid:" + this.state.member_id);
          console.log("refreshToken:" + this.state.refreshtoken);
          console.log("restInstance:" + this.state.restInstance);
          console.log("soapInstance:" + this.state.soapInstance);
          const regex = /\d/;
          let nam = event.target.name;
          let val = event.target.value;
          this.setState({ domain: val });
          if (this.state.intelliseedLists && val != "Apply to all domains") {
            var toggledIntelliseed = [];

            for (var i = 0; i < this.state.intelliseedLists.length; i++) {
              toggledIntelliseed.push(this.state.intelliseedLists[i]);
            }
            for (var i = 0; i < toggledIntelliseed.length; i++) {
              this.setState({
                [toggledIntelliseed[i] + "toggleStatus"]: false,
              });
              this.setState({ intelliseedLists: [] });
            }
          }
          const thisdata = this;
          const params = {
            domain: val,
          };
          if (this.state.page == 2) {
            if (val != "" && val != " " && val != undefined) {
              ReactDOM.render(<p> </p>, document.getElementById("domainCheck"));
            }
          }
          if (val == "") {
            this.setState({ inboxRange: 50 });
            this.setState({ engagementrange: 0 });
            this.setState({ SPFrange: 90 });
            this.setState({ DKIMrange: 90 });

            //dinesh did for select picklist
            thisdata.setState({ inboxToggleVisible: false });
            thisdata.setState({ engagementToggleVisible: false });
            thisdata.setState({ SPFToggleVisible: false });
            thisdata.setState({ DKIMToggleVisible: false });
            thisdata.setState({ CampaignToggleVisible: false });
            thisdata.setState({ ClassNameIndexBox: false });
            thisdata.setState({ classNameEngagementBox: false });
            thisdata.setState({ classNameSpfBox: false });
            thisdata.setState({ classNameDkimBox: false });
            thisdata.setState({ classNameCampaignBox: false });
            thisdata.setState({ imageIndex: "/images/inbox_idle.png" });
            thisdata.setState({
              imageEngagementReadRate: "/images/engagement_idle.png",
            });
            thisdata.setState({ ImageSpf: "/images/spf_idle.png" });
            thisdata.setState({ imageDkim: "/images/dkim_idle.png" });
            thisdata.setState({
              imageMinValume: "/images/campaign_min_idle.png",
            });
            thisdata.setState({
              imageCampaignMin: "/images/intelliseed_idle.png",
            });

            //Change Class (Backgound Color)
            thisdata.setState({ classNameIndex: "outderDiv" });
            thisdata.setState({
              classNameEngagementReadRate: "outderDiv",
            });
            thisdata.setState({ classNameSpf: "outderDiv" });
            thisdata.setState({ classNameDkim: "outderDiv" });
            thisdata.setState({ classNameMinValume: "outderDiv" });
            thisdata.setState({ classNameCampaignMin: "outderDiv" });
            //clear button
            this.setState({ inboxRangeChange: false });
            this.setState({ enagagementRangeChange: false });
            this.setState({ SPFRangeChange: false });
            this.setState({ DKIMRangeChange: false });
            this.setState({ CampaignChange: false });
            this.setState({ classNameIntelliseedBox: false });
          }

          //Change Image Color and background
          else if (nam == "domain" && val != "Apply to all domains") {
            console.log("ELSE IF :::");
            console.log("memberid:" + this.state.member_id);
            console.log("refreshToken:" + this.state.refreshtoken);
            console.log("restInstance:" + this.state.restInstance);
            console.log("soapInstance:" + this.state.soapInstance);
            this.state.data.map((api) => {
              thisdata.setState({
                [api.domain + "Id"]: api.domainId,
              });
            });
            const domainvalue = {
              domainvalue: val,
              refreshToken: this.state.refreshtoken,
              tssd: this.state.tssd,
              memberid: this.state.member_id,
              restInstance: this.state.restInstance,
              soapInstance: this.state.soapInstance,
              FolderID: this.state.FolderID,
            };
            axios({
              method: "POST",
              url: "/retrievingDataExtensionRows",
              data: domainvalue,
            })
              .then(function (response) {
                thisdata.setState({
                  refreshtoken: response.data.refreshToken,
                });
                if (response.data.rawData) {
                  let inboxResponseValue = JSON.parse(
                    JSON.stringify(response.data.rawData)
                  )[0]["Properties"][0]["Property"][2]["Value"];
                  let engagementResponseValue = JSON.parse(
                    JSON.stringify(response.data.rawData)
                  )[0]["Properties"][0]["Property"][3]["Value"];
                  let SPFResponseValue = JSON.parse(
                    JSON.stringify(response.data.rawData)
                  )[0]["Properties"][0]["Property"][4]["Value"];
                  let DKIMResponseValue = JSON.parse(
                    JSON.stringify(response.data.rawData)
                  )[0]["Properties"][0]["Property"][5]["Value"];
                  let CampaignResponseValue = JSON.parse(
                    JSON.stringify(response.data.rawData)
                  )[0]["Properties"][0]["Property"][6]["Value"];
                  let intelliseedSelected = JSON.parse(
                    JSON.stringify(response.data.rawData)
                  )[0]["Properties"][0]["Property"][7]["Value"];
                  if (
                    intelliseedSelected[0] != undefined &&
                    intelliseedSelected[0] != ""
                  ) {
                    var toggledIntelliseed = [];
                    var IntelliseedSplited = intelliseedSelected[0].split(",");
                    for (var i = 0; i < IntelliseedSplited.length; i++) {
                      IntelliseedSplited[i].replace(/['"]/g, "");
                      toggledIntelliseed.push(IntelliseedSplited[i]);
                    }

                    for (var i = 0; i < toggledIntelliseed.length; i++) {
                      thisdata.setState({
                        [toggledIntelliseed[i] + "toggleStatus"]: true,
                      });
                    }

                    thisdata.setState({ intelliseedLists: toggledIntelliseed });
                    thisdata.setState({ IntelliseedToggleVisible: true });
                    thisdata.setState({
                      imageCampaignMin: "/images/intelliseed_light.png",
                    });
                    thisdata.setState({
                      classNameCampaignMin: "campaignoutderDiv",
                    });
                    thisdata.setState({ classNameIntelliseedBox: true });
                  } else {
                    thisdata.setState({
                      imageCampaignMin: "/images/intelliseed_idle.png",
                    });
                    thisdata.setState({
                      classNameCampaignMin: "outderDiv",
                    });
                    thisdata.setState({ IntelliseedToggleVisible: false });
                    thisdata.setState({ classNameIntelliseedBox: false });
                  }
                  //})

                  if (
                    inboxResponseValue != undefined &&
                    inboxResponseValue != "" &&
                    regex.test(inboxResponseValue)
                  ) {
                    thisdata.setState({ inboxrange: inboxResponseValue }); //set value

                    thisdata.setState({ inboxRangeChange: true });

                    thisdata.setState({ ClassNameIndexBox: true }); //used for small whitebox with value

                    thisdata.setState({
                      imageIndex: "/images/inbox_light.png",
                    });

                    //Change Class (Backgound Color)
                    thisdata.setState({ classNameIndex: "outderDiv1" }); //used for orangebackground
                  } else {
                    thisdata.setState({ inboxRangeChange: false });
                    thisdata.setState({ inboxToggleVisible: false });
                    thisdata.setState({ ClassNameIndexBox: false });
                    thisdata.setState({ imageIndex: "/images/inbox_idle.png" });
                    thisdata.setState({ classNameIndex: "outderDiv" });
                  }

                  if (
                    engagementResponseValue != undefined &&
                    engagementResponseValue != "" &&
                    regex.test(engagementResponseValue)
                  ) {
                    thisdata.setState({
                      engagementrange: engagementResponseValue,
                    });
                    thisdata.setState({ enagagementRangeChange: true });
                    thisdata.setState({ inboxToggleVisible: true });
                    thisdata.setState({ engagementToggleVisible: true });
                    thisdata.setState({ classNameEngagementBox: true });
                    thisdata.setState({
                      imageEngagementReadRate: "/images/engagement_light.png",
                    });
                    thisdata.setState({
                      classNameEngagementReadRate: "outderDiv1",
                    });
                  } else {
                    thisdata.setState({ enagagementRangeChange: false });
                    thisdata.setState({ engagementToggleVisible: false });
                    thisdata.setState({ classNameEngagementBox: false });
                    thisdata.setState({
                      imageEngagementReadRate: "/images/engagement_idle.png",
                    });
                    thisdata.setState({
                      classNameEngagementReadRate: "outderDiv",
                    });
                  }
                  if (SPFResponseValue != "" && regex.test(SPFResponseValue)) {
                    thisdata.setState({ SPFRangeChange: true });
                    thisdata.setState({ SPFrange: SPFResponseValue });
                    thisdata.setState({ SPFToggleVisible: true });
                    thisdata.setState({ classNameSpfBox: true });
                    thisdata.setState({ ImageSpf: "/images/spf_light.png" });
                    thisdata.setState({ classNameSpf: "outderDiv1" });
                  } else {
                    thisdata.setState({ SPFRangeChange: false });
                    thisdata.setState({ SPFToggleVisible: false });
                    thisdata.setState({ classNameSpfBox: false });
                    thisdata.setState({ ImageSpf: "/images/spf_idle.png" });
                    thisdata.setState({ classNameSpf: "outderDiv" });
                  }
                  if (
                    DKIMResponseValue != "" &&
                    regex.test(DKIMResponseValue)
                  ) {
                    thisdata.setState({ DKIMrange: DKIMResponseValue });
                    thisdata.setState({ DKIMRangeChange: true });
                    thisdata.setState({ DKIMToggleVisible: true });
                    thisdata.setState({ classNameDkimBox: true });
                    thisdata.setState({ imageDkim: "/images/dkim_light.png" });
                    thisdata.setState({ classNameDkim: "outderDiv1" });
                  } else {
                    thisdata.setState({ DKIMRangeChange: false });
                    thisdata.setState({ DKIMToggleVisible: false });
                    thisdata.setState({ classNameDkimBox: false });
                    thisdata.setState({ imageDkim: "/images/dkim_idle.png" });
                    thisdata.setState({ classNameDkim: "outderDiv" });
                  }
                  if (
                    CampaignResponseValue != undefined &&
                    CampaignResponseValue != "" &&
                    regex.test(CampaignResponseValue)
                  ) {
                    thisdata.setState({
                      rulesMdlCampaignMinVal: CampaignResponseValue[0],
                    });
                    thisdata.setState({ CampaignToggleVisible: true });
                    thisdata.setState({ classNameCampaignBox: true });
                    thisdata.setState({ CampaignChange: true });
                    thisdata.setState({
                      imageMinValume: "/images/campaign_min_light.png",
                    });
                    thisdata.setState({
                      classNameMinValume: "campaignoutderDiv",
                    });
                  } else {
                    thisdata.setState({ CampaignChange: false });
                    thisdata.setState({ CampaignToggleVisible: false });
                    thisdata.setState({ classNameCampaignBox: false });
                    thisdata.setState({
                      imageMinValume: "/images/campaign_min_idle.png",
                    });
                    thisdata.setState({ classNameMinValume: "outderDiv" });
                  }

                  if (val == "6") {
                    thisdata.setState({ IntelliseedToggleVisible: true });
                    thisdata.setState({ imageIndex: "/images/inbox_idle.png" });
                    thisdata.setState({
                      imageEngagementReadRate: "/images/engagement_idle.png",
                    });
                    thisdata.setState({ ImageSpf: "/images/spf_idle.png" });
                    thisdata.setState({ imageDkim: "/images/dkim_idle.png" });
                    thisdata.setState({
                      imageMinValume: "/images/campaign_min_idle.png",
                    });
                    thisdata.setState({
                      imageCampaignMin: "/images/intelliseed_idle.png",
                    });

                    //Change Class (Backgound Color)
                    thisdata.setState({ classNameIndex: "outderDiv" });
                    thisdata.setState({
                      classNameEngagementReadRate: "outderDiv",
                    });
                    thisdata.setState({ classNameSpf: "outderDiv" });
                    thisdata.setState({ classNameDkim: "outderDiv" });
                    thisdata.setState({ classNameMinValume: "outderDiv" });
                    thisdata.setState({ classNameCampaignMin: "outderDiv1" });
                  } else if (val == "0") {
                    consle.log("last condition");
                    thisdata.setState({ imageIndex: "/images/inbox_idle.png" });
                    thisdata.setState({
                      imageEngagementReadRate: "/images/engagement_idle.png",
                    });
                    thisdata.setState({ ImageSpf: "/images/spf_idle.png" });
                    thisdata.setState({ imageDkim: "/images/dkim_idle.png" });
                    thisdata.setState({
                      imageMinValume: "/images/campaign_min_idle.png",
                    });
                    thisdata.setState({
                      imageCampaignMin: "/images/intelliseed_idle.png",
                    });

                    //Change Class (Backgound Color)
                    thisdata.setState({ classNameIndex: "outderDiv" });
                    thisdata.setState({
                      classNameEngagementReadRate: "outderDiv",
                    });
                    thisdata.setState({ classNameSpf: "outderDiv" });
                    thisdata.setState({ classNameDkim: "outderDiv" });
                    thisdata.setState({ classNameMinValume: "outderDiv" });
                    thisdata.setState({ classNameCampaignMin: "outderDiv" });
                  }
                } else {
                  thisdata.setState({ inboxRangeChange: false });
                  thisdata.setState({ enagagementRangeChange: false });
                  thisdata.setState({ SPFRangeChange: false });
                  thisdata.setState({ SPFToggleVisible: false });
                  thisdata.setState({ DKIMRangeChange: false });
                  thisdata.setState({ CampaignChange: false });
                  thisdata.setState({ inboxToggleVisible: false });
                  thisdata.setState({ engagementToggleVisible: false });
                  thisdata.setState({ SPFToggleVisible: false });
                  thisdata.setState({ DKIMToggleVisible: false });
                  thisdata.setState({ CampaignToggleVisible: false });
                  thisdata.setState({ ClassNameIndexBox: false });
                  thisdata.setState({ classNameEngagementBox: false });
                  thisdata.setState({ classNameSpfBox: false });
                  thisdata.setState({ classNameDkimBox: false });
                  thisdata.setState({ classNameCampaignBox: false });
                  thisdata.setState({ classNameIntelliseedBox: false });
                  thisdata.setState({
                    rulesMdlCampaignMinVal: "",
                  });
                  thisdata.setState({ imageIndex: "/images/inbox_idle.png" });
                  thisdata.setState({
                    imageEngagementReadRate: "/images/engagement_idle.png",
                  });
                  thisdata.setState({ ImageSpf: "/images/spf_idle.png" });
                  thisdata.setState({ imageDkim: "/images/dkim_idle.png" });
                  thisdata.setState({
                    imageMinValume: "/images/campaign_min_idle.png",
                  });
                  thisdata.setState({
                    imageCampaignMin: "/images/intelliseed_idle.png",
                  });

                  //Change Class (Backgound Color)
                  thisdata.setState({ classNameIndex: "outderDiv" });
                  thisdata.setState({
                    classNameEngagementReadRate: "outderDiv",
                  });
                  thisdata.setState({ classNameSpf: "outderDiv" });
                  thisdata.setState({ classNameDkim: "outderDiv" });
                  thisdata.setState({ classNameMinValume: "outderDiv" });
                  thisdata.setState({ classNameCampaignMin: "outderDiv" });
                }
              })
              .catch(function (error) {
                console.log(error);
              });
          }
          //alert('Value Changed');
        };

        //renders the UI based on the page number
        render() {
          if (this.state.page == 1) {
            return (
              <div>
                {wizardNavigationNew(1, this.redirectFromWizardSteps)}
                {AddLogorow()}
                <div class="e1container">
                  <div class=" scrolls ">
                    <div class="row epaddingbottom10">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1 e1margintop10">
                          Account ID
                        </label>
                        <input
                          disabled
                          name="groupname"
                          value={this.state.groupname}
                          placeholder="SalesforceIntegration"
                          class="e1inputpg1"
                          maxlength="40"
                          onChange={this.myChangeHandler}
                        />
                        <span id="valMsggroupname"></span>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <hr class="e1linecolor" />
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1">
                          Sparkpost User Dashboard Access{" "}
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div class="row epaddingbottom10">
                      <div class="col-md-5 elRowPg1">
                        <label class="e1labelheaderPage1 e1margintop10">
                          User ID
                        </label>
                        <input
                          id="preferredUserName"
                          name="namex"
                          value={this.state.namex}
                          class="e1inputpg1"
                          maxlength="40"
                          onChange={this.myChangeHandler}
                          style={{ backgroundColor: "white" }}
                        />
                        <div id="valMsgnamex" />
                      </div>
                      <div class="col-md-5 elRowPg1"></div>
                      <div class="col-md-2"></div>
                    </div>
                    <div class="row epaddingbottom10 displayType">
                      <div class="col-md-12 elRowPg1 disBlock">
                        <button
                          onClick={this.handleVerifyMyAccount}
                          class="btn btn-default btn-xs float-right e1buttonleftpadding verifybtn"
                        >
                          Verify My Account
                        </button>
                      </div>
                    </div>
                    <hr class="e1linecolor" />
                    {ValidateAndNotify(
                      this.state.namex,
                      this.state.groupname,
                      this.state.Page1ValidationStatus
                    )}{" "}
                    {/*this.state.namex, this.state.groupname, this.state.Page1ValidationStatus)*/}
                  </div>
                </div>
                {AddButtonBlock(
                  this.handleChangeCancel,
                  this.handleChangeNext,
                  "Next",
                  "btn btn-primary btn-xs float-right e1buttonleftpadding",
                  this.handleChangeBack,
                  this.state.page
                )}
              </div>
            );
          } else if (this.state.page == 2) {
            let styles = { display: "block", "padding-right": "27px" };
            if (!this.state.modalVisible || !this.state.modalClicked) {
              styles = { display: "none" };
            }
            let className = "";
            if (this.state.inboxrange != 0) {
              let inboxId = document.getElementById("inboxId");
            }

            return (
              <div>
                {wizardNavigationNew(2, this.redirectFromWizardSteps)}
                {AddLogorow()}
                <div class="e1container wrapper">
                  <div class=" scrolls ">
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label
                          class="e1labelheaderPage1 e1margintop10"
                          style={{ "margin-bottom": "0px" }}
                        >
                          Account Domain Level Configuration (Applied Changes
                          will affect all account users)
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPageTop">
                          Please select default settings by domain for all
                          accounts users in all domains, (threshold changes will
                          affect all account users)
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div class="row epaddingbottom10">
                      <div class="col-md-11 epaddingbottom10 marginTop">
                        <select
                          class="elRowPg1 e1inputpg1"
                          name="domain"
                          value={this.state.domain}
                          onChange={this.onChangeValue}
                          //onClick={this.deleteException}
                        >
                          <option value="" selected>
                            --Select--
                          </option>
                          <option value="Apply to all domains">
                            Apply to all domains
                          </option>

                          {this.state.data &&
                            this.state.data.map((api) => {
                              return (
                                <option value={api.domain}>{api.domain}</option>
                              );
                            })}
                        </select>
                        <div id="domainCheck" />
                      </div>
                      <div class="col-md-1 epaddingbottom10"></div>
                    </div>
                    <div class="row">
                      <div class="col-md-12 marginLeft30px">
                        <label class="e1labelheaderPage1Red">
                          {" "}
                          Inbox Tracker{" "}
                        </label>
                        <hr
                          style={{
                            "border-top": "1px solid rgba(0,0,0,.2)",
                            "margin-right": "30px",
                            "margin-top": "0px !important",
                          }}
                        />
                      </div>
                      <div class="col-md-1"></div>
                    </div>

                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1 marginTop10px">
                          <img
                            class="thresbtns2 imageBackgroud"
                            src="/images/threshold.png"
                          />{" "}
                          Thresholds{" "}
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>
                    <div style={{ "padding-left": "30px" }} class="row">
                      <div class=" col-md-3">
                        <div style={{ "margin-left": "15px;" }} class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameIndex}
                              id="inboxId"
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn1data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn1data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtns"
                                  src={this.state.imageIndex}
                                />
                              </a>
                              {this.state.inboxRangeChange ? (
                                <button
                                  class="inboxClearButton"
                                  onClick={this.clearThresholdRulesButtons(
                                    "inboxClear"
                                  )}
                                >
                                  {" "}
                                  Clear X{" "}
                                </button>
                              ) : (
                                ""
                              )}
                              {this.state.ClassNameIndexBox ? (
                                <p
                                  class="inboxRangewhite"
                                  id="inboxRangeUpdate"
                                >
                                  <span> &lt; </span>{" "}
                                  {Math.round(parseInt(this.state.inboxrange))}%{" "}
                                </p>
                              ) : (
                                <p
                                  class={this.state.classNameIndexBoxvisible}
                                  id="inboxRangeUpdate"
                                ></p>
                              )}
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">Inbox</label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6"
                          >
                            {ApplyToggleStyle(
                              this.state.indextoggle,
                              "indextoggle",
                              this.myChangeHandler,
                              "spanindex",
                              this.state.domain,
                              false,
                              false,
                              false,
                              false
                            )}
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameEngagementReadRate}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn2data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn2data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtnsSecond "
                                  src={this.state.imageEngagementReadRate}
                                />
                              </a>
                              {this.state.enagagementRangeChange ? (
                                <button
                                  class="engagemnetClearButton"
                                  onClick={this.clearThresholdRulesButtons(
                                    "enagagementClear"
                                  )}
                                >
                                  {" "}
                                  Clear X{" "}
                                </button>
                              ) : (
                                ""
                              )}
                              {this.state.classNameEngagementBox ? (
                                <p
                                  class="inboxRange2white"
                                  id="engagementRangeUpdate"
                                >
                                  <span> &lt; </span>{" "}
                                  {Math.round(
                                    parseInt(this.state.engagementrange)
                                  )}
                                  %{" "}
                                </p>
                              ) : (
                                <p
                                  class={
                                    this.state.classNameEnagagementBoxvisible
                                  }
                                  id="engagementRangeUpdate"
                                ></p>
                              )}
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPageERR">
                                Engagement Read Rate
                              </label>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameSpf}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn3data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn3data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtnsSpf"
                                  src={this.state.ImageSpf}
                                />
                              </a>
                              {this.state.SPFRangeChange ? (
                                <button
                                  class="spfClearButton"
                                  onClick={this.clearThresholdRulesButtons(
                                    "spfClear"
                                  )}
                                >
                                  {" "}
                                  Clear X{" "}
                                </button>
                              ) : (
                                ""
                              )}
                              {this.state.classNameSpfBox ? (
                                <p class="inboxRange2white" id="spfRangeUpdate">
                                  <span> &lt; </span> {this.state.SPFrange}%{" "}
                                </p>
                              ) : (
                                <p
                                  class={this.state.classNameSPFBoxvisible}
                                  id="spfRangeUpdate"
                                ></p>
                              )}
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">SPF</label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6"
                          >
                            {ApplyToggleStyle(
                              this.state.spftoggle,
                              "spftoggle",
                              this.myChangeHandler,
                              "spanspf",
                              this.state.domain,
                              false,
                              false,
                              false,
                              false
                            )}
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameDkim}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn4data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn4data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtnsDkim"
                                  src={this.state.imageDkim}
                                />
                              </a>
                              {this.state.DKIMRangeChange ? (
                                <button
                                  class="dkimClearButton"
                                  onClick={this.clearThresholdRulesButtons(
                                    "dkimClear"
                                  )}
                                >
                                  {" "}
                                  Clear X{" "}
                                </button>
                              ) : (
                                ""
                              )}
                              {this.state.classNameDkimBox ? (
                                <p
                                  class="inboxRange2white"
                                  id="dkimRangeUpdate"
                                >
                                  <span> &lt; </span> {this.state.DKIMrange}%{" "}
                                </p>
                              ) : (
                                <p class="inboxRange2" id="dkimRangeUpdate"></p>
                              )}
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">DKIM</label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6"
                          >
                            {/*ApplyToggleStyle(this.state.rulestoggle, "rulestoggle", this.myChangeHandler, "spanrules")*/}
                          </div>
                        </div>
                      </div>
                    </div>
                    {/* <hr class="e1linecolor" />*/}
                    <div class="row">
                      <div class="col-md-11 elRowPg1">
                        <label class="e1labelheaderPage1">
                          <img
                            class="thresbtns2 imageBackgroudLightGray"
                            src="/images/rules.png"
                          />{" "}
                          Rules{" "}
                        </label>
                      </div>
                      <div class="col-md-1"></div>
                    </div>

                    <div class="row" style={{ marginLeft: 15 }}>
                      <div class=" col-md-3">
                        <div class="row">
                          <div class="col-md-6">
                            <div
                              class={this.state.classNameMinValume}
                              data-toggle="modal"
                              data-target="#myModal"
                              name="btn5data"
                              data-backdrop="static"
                              data-keyboard="false"
                              onClick={this.handleThresholdRulesButtons(
                                "btn5data"
                              )}
                            >
                              <a>
                                <img
                                  class="thresbtns"
                                  src={this.state.imageMinValume}
                                />
                              </a>
                              {this.state.CampaignChange ? (
                                <button
                                  class="campaingnClearButton"
                                  onClick={this.clearThresholdRulesButtons(
                                    "campaignClear"
                                  )}
                                >
                                  {" "}
                                  Clear X{" "}
                                </button>
                              ) : (
                                ""
                              )}
                              {this.state.classNameCampaignBox ? (
                                <p class="inboxRange2white">
                                  {this.state.rulesMdlCampaignMinVal}{" "}
                                </p>
                              ) : (
                                <p class="inboxRange2"></p>
                              )}
                            </div>
                            <div class="textAlignCenter">
                              <label class="e1labelheaderPage4">
                                Campaign Minimum
                              </label>
                            </div>
                          </div>
                          <div
                            style={{
                              "padding-top": "42px",
                              "padding-left": "32px",
                            }}
                            class="col-md-6 paddingTop30Px"
                          >
                            {ApplyToggleStyle(
                              this.state.rulestoggle,
                              "rulestoggle",
                              this.myChangeHandler,
                              "spanrules",
                              this.state.domain,
                              false,
                              false,
                              false,
                              false
                            )}
                          </div>
                        </div>
                      </div>
                      <div class=" col-md-3">
                        <div
                          class={this.state.classNameCampaignMin}
                          data-toggle="modal"
                          data-target="#myModal"
                          name="btn6data"
                          data-backdrop="static"
                          data-keyboard="false"
                          onClick={this.handleThresholdRulesButtons("btn6data")}
                        >
                          <a>
                            <img
                              class="thresbtns"
                              src={this.state.imageCampaignMin}
                            />
                          </a>
                          {this.state.classNameIntelliseedBox ? (
                            <button
                              class="campaingnClearButton"
                              onClick={this.clearThresholdRulesButtons(
                                "intelliseedClear"
                              )}
                            >
                              {" "}
                              Clear X{" "}
                            </button>
                          ) : (
                            ""
                          )}
                        </div>
                        <div class="textAlignCenter">
                          <label class="e1labelheaderPage4">Intelliseed</label>
                        </div>
                      </div>
                      <div class=" col-md-3"></div>
                      <div class=" col-md-3"></div>
                    </div>
                    <hr
                      style={{
                        "border-top": "1px solid rgba(0,0,0,.2)",
                        "margin-left": "30px",
                      }}
                    />
                  </div>
                </div>
                {AddButtonBlock(
                  this.handleChangeCancel,
                  this.handleChangeNext,
                  "Next",
                  "btn btn-primary btn-xs float-right e1buttonleftpadding",
                  this.handleChangeBack,
                  this.state.page
                )}

                <div id="dummydiv" className="modal fade in"></div>

                {this.state.modalVisible == true ? (
                  <div
                    id="myModal"
                    className={
                      this.state.modalName == "1" ||
                      this.state.modalName == "1b" ||
                      this.state.modalName == "1c" ||
                      this.state.modalName == "1d" ||
                      this.state.modalName == "2a" ||
                      this.state.modalName == "2b"
                        ? "modal fade in modalCenter show"
                        : "modal fade in show"
                    }
                    role="dialog"
                    style={styles}
                  >
                    <div
                      className="modal-dialog"
                      style={{ "padding-top": "0px" }}
                    >
                      <div className="modal-content">
                        {GetThresholdsMedalSection(
                          this.state.inboxrange,
                          this.myChangeHandler,
                          this.state.inboxrangelabel,
                          this.state.modalName,
                          this.state.modalheader,

                          this.state.rulesMdlName,
                          this.state.rulesMdlSimulatedEng,
                          this.state.rulesMdlPercentList,
                          this.state.rulesMdlCampaignMinVal,
                          this.state.rulesMdlFilterByRegion,
                          this.state.rulesMdlNorthAmericaCanada,
                          this.state.rulesMdlNorthAmericaUS,
                          this.state.rulesMdlAsiaPacific,

                          this.myBtnClickHandler,
                          this.state.rulesMdlForm,
                          this.openModal,
                          this.engageButtonChange,
                          this.state.engagementrange,
                          this.state.engagementrangelabel,
                          this.state.SPFrange,
                          this.state.SPFrangelabel,
                          this.state.DKIMrange,
                          this.state.DKIMrangelabel,

                          "Please select default settings for ",
                          this.state.domain,
                          this.state.classNameEngagedButton,
                          this.state.classNameUnEngagedButton,
                          this.state.intelliseedData,
                          this.state.toggleIntelliseed,
                          this.state,
                          this.state.intelliseedLists
                        )}
                        <div class="e1container3">
                          <div class="row">
                            <div class="col-md-2 pull-left">
                              <button
                                data-buttonname={this.state.modalName}
                                name="cancel"
                                onClick={this.handleChangeCancel}
                                class="btn btn-link e1cancelbuton float-left"
                              >
                                Cancel
                              </button>
                            </div>
                            <div class="col-md-7" id="mydiv"></div>
                            <div class="col-md-3">
                              <button
                                data-buttonname={this.state.modalName}
                                onClick={this.openModal}
                                className="btn btn-info btn-xs float-right e1buttonleftpadding epaddingright10 backgroundColor"
                              >
                                Done
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  ""
                )}
                {this.state.modalVisible == true ? (
                  <div class="modal-backdrop fade show"></div>
                ) : (
                  ""
                )}
              </div>
            );
          } else if (this.state.page == 3) {
            return (
              <div>
                {wizardNavigationNew(3, this.redirectFromWizardSteps)}
                {AddLogorow()}
                <div class="e1container">
                  <div class="row epaddingbottom10 e1marginleft emargintop10">
                    <div class="col-md-11">
                      <label class="e1labelheaderPage3">SETUP SUMMARY</label>
                    </div>
                    <div class="col-md-1"></div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="e1labelheaderPage3Acc">Account ID</label>
                    </div>
                    <div class="col-md-5">
                      <label class="e1labelheaderPage3">DOMAIN</label>
                      <select
                        id="3rdPageDropDown"
                        class="elRowPg2 e1inputpg1"
                        name="domain"
                        onChange={this.onChangeValue}
                      >
                        {this.state.data &&
                          this.state.data.map((api) => {
                            if (api.domain != this.state.domain) {
                              return (
                                <option value={api.domain}>{api.domain}</option>
                              );
                            }

                            if (this.state.domain == api.domain) {
                              return (
                                <option value={this.state.domain} selected>
                                  {this.state.domain}
                                </option>
                              );
                            }
                          })}
                      </select>
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="reviewSetupLabel">
                        {this.state.groupname}
                      </label>
                    </div>
                    <div class="col-md-5"></div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 "></div>
                    <div class="col-md-5">
                      <label class="e1labelheaderPage3">THRESHOLDS</label>
                    </div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="e1labelheaderPage3">SSO ACCESS</label>
                    </div>
                    <div class="col-md-5 reviewSetupLabel">
                      {this.state.inboxRangeChange &&
                      this.state.inboxrange != 0 ? (
                        <div>Inbox: &lt; {this.state.inboxrange}%</div>
                      ) : (
                        <div>Inbox:</div>
                      )}
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="reviewSetupLabel">STATUS: ACTIVE</label>
                    </div>
                    <div class="col-md-5 reviewSetupLabel">
                      {this.state.enagagementRangeChange &&
                      this.state.engagementrange != 0 ? (
                        <div>
                          Engagement: &lt; {this.state.engagementrange}%
                        </div>
                      ) : (
                        <div>Engagement:</div>
                      )}
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <label class="reviewSetupLabel">
                        USER ID: {this.state.namex}
                      </label>
                    </div>
                    <div class="col-md-5 reviewSetupLabel">
                      {this.state.SPFRangeChange && this.state.SPFrange != 0 ? (
                        <div>SPF: &lt; {this.state.SPFrange}%</div>
                      ) : (
                        <div>SPF:</div>
                      )}
                    </div>
                  </div>

                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label class="reviewSetupLabel">
                        {this.state.DKIMRangeChange &&
                        this.state.DKIMrange != 0 ? (
                          <div>DKIM: &lt; {this.state.DKIMrange}%</div>
                        ) : (
                          <div>DKIM:</div>
                        )}
                      </label>
                      <br />
                      <br />
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label class="e1labelheaderPage3">RULES</label>
                      <br />
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label class="reviewSetupLabel">
                        Campaign Minimum : {this.state.rulesMdlCampaignMinVal}
                      </label>
                      <br />
                      <br />
                    </div>
                  </div>
                  <div class="row e1marginleft">
                    <div class="col-md-7 ">
                      <br />
                    </div>
                    <div class="col-md-5 ">
                      <label class="e1labelheaderPage3">Intelliseed(s)</label>
                      <br />
                    </div>
                  </div>

                  {GetIntelliseedLists(this.state.intelliseedLists)}
                </div>
                {AddButtonBlock(
                  this.handleChangeCancel,
                  this.handleChangeNext,
                  "Done",
                  "btn btn-primary btn-xs float-right e1buttonleftpadding",
                  this.handleChangeBack,
                  this.state.page
                )}
              </div>
            );
          }
        }
      }

      //this is the starting point of react.js
      ReactDOM.render(<SparkpostPage1 />, document.getElementById("mydiv"));
    </script>
  </body>
</html>
